<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Room 3100</title>
  <subtitle>Nothing to see here, citizen.</subtitle>
  <id>http://3100.github.io/blog</id>
  <link href="http://3100.github.io/blog"/>
  <link href="http://3100.github.io/blog/feed.xml" rel="self"/>
  <updated>2014-04-13T03:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>DigitalOceanがArchの提供をやめるらしい</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/04/13/digitalocean-are-deprecating-arch.html"/>
    <id>http://3100.github.io/blog/2014/04/13/digitalocean-are-deprecating-arch.html</id>
    <published>2014-04-13T03:00:00Z</published>
    <updated>2014-04-13T04:54:07+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="snap" src="/blog/2014/04/13/digitalocean-are-deprecating-arch/snapshot.png" /&gt;&lt;/p&gt;

&lt;h2 id="section"&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.digitalocean.com/"&gt;DigitalOcean&lt;/a&gt;が&lt;code&gt;Arch&lt;/code&gt;イメージの提供を廃止予定だそうです。その理由ですが&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使っているユーザがそれほど多くない&lt;/li&gt;
  &lt;li&gt;ローリングアップデートに対応する労力を避けない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とのこと。&lt;code&gt;Arch&lt;/code&gt;の素晴らしさが世間に十分認知されず、とても残念です。&lt;/p&gt;

&lt;h2 id="section-1"&gt;私見&lt;/h2&gt;

&lt;p&gt;個人的には&lt;code&gt;Docker&lt;/code&gt;が安定すればその上で&lt;code&gt;Arch&lt;/code&gt;を動かせばいいやと思っているので、すぐ代替先を探そう！とはなりません。が、&lt;code&gt;Docker 0.10&lt;/code&gt;では&lt;code&gt;systemd&lt;/code&gt;がうまく動作しない問題があるため、そちらが早く治ってくれるといいなぁ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/dotcloud/docker/issues/3629"&gt;running systemd inside docker arch container hangs or segfaults · Issue #3629 · dotcloud/docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最近は複数の&lt;code&gt;Docker&lt;/code&gt;コンテナでクラスタを構築できる&lt;code&gt;CoreOS&lt;/code&gt;も気になってはいるので、そういうものも&lt;code&gt;DigitalOcean&lt;/code&gt;上で動かしたい欲求があります。&lt;/p&gt;

&lt;p&gt;独自イメージのアップロード機能や、&lt;code&gt;CoreOS&lt;/code&gt;イメージの提供を求める声も多いのですが、その辺もあまり進捗はないみたいですね。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="http://digitalocean.uservoice.com/forums/136585-digitalocean/suggestions/3276477-allow-custom-images"&gt;Allow Custom Images – Customer Feedback for Digital Ocean&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="http://digitalocean.uservoice.com/forums/136585-digital-ocean/suggestions/4250154-suport-coreos-as-a-deployment-platform"&gt;Suport CoreOS as a deployment platform – Customer Feedback for Digital Ocean&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一時期は&lt;code&gt;AWS&lt;/code&gt;型の重厚なサービスではなく、&lt;code&gt;DigitalOcean&lt;/code&gt;のような軽量なサービスこそ次の主流になる、と思っていたのですが、サービス品質や姿勢についてはまだまだこれからかなという印象を抱いています。それでも価格を考えれば良いものを提供していることはわかります。ぜひとも頑張って欲しいです。&lt;/p&gt;

&lt;p&gt;それにしても、イメージファイルのメンテや追加ってそんなに大変なのだろうか。もしかすると提供速度やスケールメリットを活かした独自構成がその辺りを犠牲にしているのかもしれないですね。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Objective-Cへ入門</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/04/10/learn-objective-c-again.html"/>
    <id>http://3100.github.io/blog/2014/04/10/learn-objective-c-again.html</id>
    <published>2014-04-10T14:00:00Z</published>
    <updated>2014-04-13T04:54:07+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;iOS用アプリ開発。
数年前に挑戦した時は、あまりの文法の気持ち悪さに断念しました。&lt;/p&gt;

&lt;p&gt;しかし、RubyMotionを触っているうちに結局Objective-Cや
iOS SDKを勉強した方が良いなと思い始め、改めて再入門することにしました。
それにあたって、以下の本を購入しました。&lt;/p&gt;

&lt;h2 id="section"&gt;継続的インテグレーション&lt;/h2&gt;

&lt;div class="amazlet-box" style="margin-bottom:0px;"&gt;&lt;div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798040894/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/51dc8HfwK8L._SL160_.jpg" alt="iOSアプリ テスト自動化入門" style="border: none;" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"&gt;&lt;div class="amazlet-name" style="margin-bottom:10px;line-height:120%"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798040894/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;iOSアプリ テスト自動化入門&lt;/a&gt;&lt;div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%"&gt;posted with &lt;a href="http://www.amazlet.com/" title="amazlet" target="_blank"&gt;amazlet&lt;/a&gt; at 14.04.10&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-detail"&gt;長谷川 孝二 &lt;br /&gt;秀和システム &lt;br /&gt;売り上げランキング: 2,341&lt;br /&gt;&lt;/div&gt;&lt;div class="amazlet-sub-info" style="float: left;"&gt;&lt;div class="amazlet-link" style="margin-top: 5px"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798040894/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-footer" style="clear: left"&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;趣味のWebアプリならともかくも、普段の仕事ではテストの自動化が片手間でしかなくて、そういった部分が嫌なのでiOSアプリを作るなら最低でもTDDでやりたいと思っています。&lt;/p&gt;

&lt;p&gt;この本はテスト自動化について簡単な概念から始まって、CIやBDDのフレームワーク紹介なんかも取り扱っています。各ライブラリについては使っているうちに別途詳しく調べる必要が出てくるだろうけれど、最近の開発スタイルについて俯瞰するのには良い1冊な気がしました。&lt;/p&gt;

&lt;p&gt;とりあえず数時間で読んでしまえるくらいの記述量で、通勤時間のお供にも良いかもしれません。&lt;/p&gt;

&lt;h2 id="ios"&gt;iOSへの入門書&lt;/h2&gt;

&lt;div class="amazlet-box" style="margin-bottom:0px;"&gt;&lt;div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4800710227/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/5108ukII8yL._SL160_.jpg" alt="詳細! Objective-C iPhoneアプリ開発 入門ノート Xcode5+iOS7対応" style="border: none;" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"&gt;&lt;div class="amazlet-name" style="margin-bottom:10px;line-height:120%"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4800710227/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;詳細! Objective-C iPhoneアプリ開発 入門ノート Xcode5+iOS7対応&lt;/a&gt;&lt;div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%"&gt;posted with &lt;a href="http://www.amazlet.com/" title="amazlet" target="_blank"&gt;amazlet&lt;/a&gt; at 14.04.10&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-detail"&gt;大重 美幸 &lt;br /&gt;ソーテック社 &lt;br /&gt;売り上げランキング: 2,726&lt;br /&gt;&lt;/div&gt;&lt;div class="amazlet-sub-info" style="float: left;"&gt;&lt;div class="amazlet-link" style="margin-top: 5px"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4800710227/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-footer" style="clear: left"&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;後述のObjective-C本に比べて図が大きく見やすいです。こうした入門書はあまり好きではないのですが、苦手意識がある場合には大変心強いです。
ざっくり目を通した感じでは、文法部分は必要最低限といった感じで、どちらかというとXCodeを使って実際に簡単なアプリを作っていくことで、基礎力をつけられる構成になっています。&lt;/p&gt;

&lt;p&gt;プログラム初心者向けにも見えるけど、そんなに概念を掘り下げて説明しないので、完全な初心者には少し厳しいかもしれないです。他の言語で開発している人なら問題ないでしょう。&lt;/p&gt;

&lt;p&gt;きちんと手を動かしていくことが大事ですが、1週間あれば1周できるくらいの量ではないかと思います。&lt;/p&gt;

&lt;div class="amazlet-box" style="margin-bottom:0px;"&gt;&lt;div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774163856/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/618Wj6bBw1L._SL160_.jpg" alt="iOSアプリエンジニア養成読本[クリエイティブな開発のための技術力/デザイン力/マインドを養う! ] (Software Design plus)" style="border: none;" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"&gt;&lt;div class="amazlet-name" style="margin-bottom:10px;line-height:120%"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774163856/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;iOSアプリエンジニア養成読本[クリエイティブな開発のための技術力/デザイン力/マインドを養う! ] (Software Design plus)&lt;/a&gt;&lt;div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%"&gt;posted with &lt;a href="http://www.amazlet.com/" title="amazlet" target="_blank"&gt;amazlet&lt;/a&gt; at 14.04.10&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-detail"&gt;高橋 俊光 諏訪 悠紀 湯村 翼 平屋 真吾 平井 祐樹 &lt;br /&gt;技術評論社 &lt;br /&gt;売り上げランキング: 464&lt;br /&gt;&lt;/div&gt;&lt;div class="amazlet-sub-info" style="float: left;"&gt;&lt;div class="amazlet-link" style="margin-top: 5px"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774163856/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-footer" style="clear: left"&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;開発を始める前に読むべき、といった取り扱いをされているので買ってみました。良くも悪くも各要素のつまみ食いといった感じで、必ずしも必要ではないのではないかと感じました。
特にgitやjenkins、travis-ciなんかを普段から使っている開発者の方は、他の本で知識を補えば立ち読みでも十分だと思います。&lt;/p&gt;

&lt;p&gt;内容自体は面白いしタメになりそうな記事もあるので、開発が進んでいくにつれてふと気楽に読み直すというスタンスが良さそうです。(あるいは新人教育への需要があるのかもしれません。明日までに読んでおけ、的な)&lt;/p&gt;

&lt;p&gt;売り上げランキングはさすがといった感じで、今回購入した中で最も人気の1冊でした。&lt;/p&gt;

&lt;h2 id="objective-c"&gt;Objective-C&lt;/h2&gt;

&lt;div class="amazlet-box" style="margin-bottom:0px;"&gt;&lt;div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797368276/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/41VdFg9YqsL._SL160_.jpg" alt="詳解 Objective-C 2.0 第3版" style="border: none;" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"&gt;&lt;div class="amazlet-name" style="margin-bottom:10px;line-height:120%"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797368276/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;詳解 Objective-C 2.0 第3版&lt;/a&gt;&lt;div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%"&gt;posted with &lt;a href="http://www.amazlet.com/" title="amazlet" target="_blank"&gt;amazlet&lt;/a&gt; at 14.04.10&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-detail"&gt;荻原 剛志 &lt;br /&gt;ソフトバンククリエイティブ &lt;br /&gt;売り上げランキング: 9,586&lt;br /&gt;&lt;/div&gt;&lt;div class="amazlet-sub-info" style="float: left;"&gt;&lt;div class="amazlet-link" style="margin-top: 5px"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797368276/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-footer" style="clear: left"&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通称萩原本？第2版は持っていますが、せっかくなので買い直しました。Objective-C
の文法について日本語で最も詳しい書籍なのではないでしょうか。
これから事あるごとに参照することになりそうです。じっくり取り組むべき本。&lt;/p&gt;

&lt;p&gt;iOS5に向けて書かれた本ですし、個人的にはそろそろ第4版が出るのではないかとも思っています。(過去の更新間隔的にも。。)&lt;/p&gt;

&lt;div class="amazlet-box" style="margin-bottom:0px;"&gt;&lt;div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798134198/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/51BbaG2KA1L._SL160_.jpg" alt="Effective Objective-C 2.0" style="border: none;" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"&gt;&lt;div class="amazlet-name" style="margin-bottom:10px;line-height:120%"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798134198/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;Effective Objective-C 2.0&lt;/a&gt;&lt;div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%"&gt;posted with &lt;a href="http://www.amazlet.com/" title="amazlet" target="_blank"&gt;amazlet&lt;/a&gt; at 14.04.10&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-detail"&gt;Matt Galloway &lt;br /&gt;翔泳社 &lt;br /&gt;売り上げランキング: 15,587&lt;br /&gt;&lt;/div&gt;&lt;div class="amazlet-sub-info" style="float: left;"&gt;&lt;div class="amazlet-link" style="margin-top: 5px"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798134198/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-footer" style="clear: left"&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;手を出すのが早過ぎるかもしれませんが、こちらも少しずつ読んでいこうと思います。他言語版を見ても、Effectiveシリーズは実務の上で必須となるようなテクニックを扱っている良書という認識です。&lt;/p&gt;

&lt;p&gt;事前に手を出しておくことで、知っていることで避けられた実装上の問題について後悔するリスクを減らしたいですね。&lt;/p&gt;

&lt;p&gt;人気(あるいは売れなさすぎ？)のせいか発送が1日遅れで、まだ手元に届いていません。&lt;/p&gt;

&lt;h2 id="section-1"&gt;さらなる高み&lt;/h2&gt;

&lt;div class="amazlet-box" style="margin-bottom:0px;"&gt;&lt;div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798039799/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/41l4NOjbb8L._SL160_.jpg" alt="iOS Core Data徹底入門" style="border: none;" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"&gt;&lt;div class="amazlet-name" style="margin-bottom:10px;line-height:120%"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798039799/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;iOS Core Data徹底入門&lt;/a&gt;&lt;div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%"&gt;posted with &lt;a href="http://www.amazlet.com/" title="amazlet" target="_blank"&gt;amazlet&lt;/a&gt; at 14.04.10&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-detail"&gt;國居 貴浩 &lt;br /&gt;秀和システム &lt;br /&gt;売り上げランキング: 19,650&lt;br /&gt;&lt;/div&gt;&lt;div class="amazlet-sub-info" style="float: left;"&gt;&lt;div class="amazlet-link" style="margin-top: 5px"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798039799/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-footer" style="clear: left"&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;iOSの永続層に関する1冊。正直まだ不要なのではないかと思うのですが、作りたいアプリや自分の普段の興味分野から考えると、いずれ必要になる本であることは間違いないです。&lt;/p&gt;

&lt;p&gt;Amazonレビューを読んだ感じではちょっと敷居の高そうな本ですが、ぱらぱらとめくった感じではわかりやすそうな印象を受けました。一応初級者向けの本であるということです。&lt;/p&gt;

&lt;h2 id="section-2"&gt;まとめ&lt;/h2&gt;

&lt;p&gt;一番最初に紹介した『&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798040894/unplu-22/ref=nosim/"&gt;テスト自動化入門&lt;/a&gt;』は出たばかりということもありまだレビューも少ないですが、割りと推しの1冊でした。
これと『&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4800710227/unplu-22/ref=nosim/"&gt;iPhoneアプリ開発入門ノート&lt;/a&gt;』があれば、とりあえず簡単なアプリケーションは開発できるようになるのではないかなと思います。&lt;/p&gt;

&lt;p&gt;自分も試行錯誤しながら開発手法を検討していきたいなと思いました。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>RubyMotionのチュートリアルでハマったところ</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/03/30/issues-in-ruby-motion-tutorial.html"/>
    <id>http://3100.github.io/blog/2014/03/30/issues-in-ruby-motion-tutorial.html</id>
    <published>2014-03-30T13:00:00Z</published>
    <updated>2014-04-13T04:54:07+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2 id="section"&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://www.rubymotion.com/"&gt;RubyMotion&lt;/a&gt;の&lt;a href="http://tutorial.rubymotion.jp/"&gt;チュートリアルサイト&lt;/a&gt;を進めています。
しかし、チュートリアルが書かれてからだいぶ経つせいか
ところどころハマりそうな部分がありましたので、ここにメモとして残しておきます。&lt;/p&gt;

&lt;h2 id="uilabel"&gt;UILabelの背景色&lt;/h2&gt;

&lt;p&gt;7章でUILabelにModelの値変更を反映させるのですが、iOS7で変更があったのかどうなのか
指示どおりに作ってもラベルが見えません。&lt;/p&gt;

&lt;p&gt;実は背景色が黒になっていることが原因なので、明示的に白を指定することで解決しました。&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;didFinishLaunchingWithOptions&lt;/span&gt;&lt;span class="ss"&gt;:launchOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#..&lt;/span&gt;
    &lt;span class="vi"&gt;@name_label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;UIColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;whiteColor&lt;/span&gt;
    &lt;span class="c1"&gt;#..&lt;/span&gt;
    &lt;span class="vi"&gt;@email_label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;UIColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;whiteColor&lt;/span&gt;
    &lt;span class="c1"&gt;#..&lt;/span&gt;
    &lt;span class="vi"&gt;@id_label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;UIColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;whiteColor&lt;/span&gt;
    &lt;span class="c1"&gt;#..&lt;/span&gt;
&lt;/pre&gt;

&lt;h2 id="specuibuttontap"&gt;SpecでUIButtonのtapができない&lt;/h2&gt;

&lt;p&gt;こちらはよく原因がわからないのですが、8章でコントローラのspecを書く際に、
うまくタップイベントが発生してくれないという問題があります。&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ButtonController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;UIViewController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;viewDidLoad&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;

    &lt;span class="vi"&gt;@button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;UIButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;buttonWithType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;UIButtonTypeRoundedRect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setTitle&lt;/span&gt; &lt;span class="s2"&gt;"Test me title!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forState&lt;/span&gt;&lt;span class="ss"&gt;:UIControlStateNormal&lt;/span&gt;
    &lt;span class="vi"&gt;@button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;accessibilityLabel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Test me!"&lt;/span&gt;
    &lt;span class="vi"&gt;@button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sizeToFit&lt;/span&gt;
    &lt;span class="vi"&gt;@button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addTarget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="ss"&gt;:'tapped'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forControlEvents&lt;/span&gt;&lt;span class="ss"&gt;:UIControlEventTouchUpInside&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addSubview&lt;/span&gt; &lt;span class="vi"&gt;@button&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tapped&lt;/span&gt;
    &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="s2"&gt;"I'm tapped!"&lt;/span&gt;
    &lt;span class="vi"&gt;@was_tapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;こうしたコントローラを作成し、&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;ButtonController&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;tests&lt;/span&gt; &lt;span class="no"&gt;ButtonController&lt;/span&gt;

    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"changes instance variable when button is tapped"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;tap&lt;/span&gt; &lt;span class="s1"&gt;'Test me!'&lt;/span&gt;
      &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_variable_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"@was_tapped"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;should&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;上記のようなspecがあったとします。ここで&lt;code&gt;rake spec&lt;/code&gt;を実行すると、
controllerに&lt;code&gt;@was_tapped&lt;/code&gt; がないと言われてしまいます。
(おそらくtapできていないため)&lt;/p&gt;

&lt;p&gt;これについてはtwitterで公式アカウント(@RubyMotion)に質問している人もいました。が、解決になってないような。。&lt;/p&gt;

&lt;div&gt;
&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p&gt;&lt;a href="https://twitter.com/gaelian"&gt;@gaelian&lt;/a&gt; &lt;a href="https://twitter.com/clayallsopp"&gt;@clayallsopp&lt;/a&gt; &lt;a href="https://twitter.com/alloy"&gt;@alloy&lt;/a&gt; is working on it, setting app.deployment_target to &amp;quot;6.1&amp;quot; should work around the problem.&lt;/p&gt;&amp;mdash; RubyMotion (@RubyMotion) &lt;a href="https://twitter.com/RubyMotion/statuses/409621868178857984"&gt;2013, 12月 8&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;また、PragProgのRubyMotion本に関するフォーラムでもこの問題は指摘されています。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://forums.pragprog.com/forums/279/topics/11365"&gt;Pragmatic Forums - Section 6.2 Testing App UI and Controllers problem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;いまいち根本的な解決には至っていないようですが、暫定的な対処法としてUIButtonのframeに以下のような設定をすると良いと書かれていました。&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="vi"&gt;@button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;CGRect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;実際に試すと、本当にこれで問題が解決しました。&lt;/p&gt;

&lt;h2 id="section-1"&gt;まとめ&lt;/h2&gt;

&lt;p&gt;RubyMotionは書いていて楽しいですが、あまり情報が多くないためこういったハマりポイントがあると辛そうです。&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>ページ読み込みを高速化するInstantClickを導入しました</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/03/30/use-instant-click.html"/>
    <id>http://3100.github.io/blog/2014/03/30/use-instant-click.html</id>
    <published>2014-03-30T05:00:00Z</published>
    <updated>2014-04-13T04:54:07+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2 id="section"&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://instantclick.io/"&gt;InstantClick&lt;/a&gt;というツールは、ユーザがハイパーリンクにマウスオーバした段階でページの先読みを行います。
これによりユーザの体感速度が改善するというので、実際にこのブログでも導入してみました。&lt;/p&gt;

&lt;h2 id="section-1"&gt;仕組み&lt;/h2&gt;

&lt;p&gt;InstantClickが行っているのはページの先読みですが、公式サイトの説明によると、ユーザがリンクにマウスカーソルを当ててから実際にリンクするまで、大体200〜300ミリ秒かかっているそうです。&lt;/p&gt;

&lt;p&gt;そこでその間にページを先読みしちゃえばいいよね？という発想になるわけですね。もちろん、マウスオーバしただけでクリックされなかった分は無駄になりますが、そのあたりも設定によって&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;特定ミリ秒マウスオーバしてから読み込み&lt;/li&gt;
  &lt;li&gt;特定リンクのみ先読みする／しない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったような調整が可能です。&lt;/p&gt;

&lt;p&gt;内部的にはpushStateとAjax(いわゆるpjax)で実現されています。&lt;/p&gt;

&lt;h2 id="section-2"&gt;導入方法&lt;/h2&gt;

&lt;p&gt;導入方法は簡単です。ページ末尾の方に2行追加するだけ。(jsファイルはダウンロードしておきます)&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&amp;lt;script src="instantclick.min.js" data-no-instant&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script data-no-instant&amp;gt;InstantClick.init();&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;このブログは&lt;a href="http://slim-lang.com/"&gt;slim&lt;/a&gt;テンプレートを用いていますので&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;= javascript_include_tag 'instantclick.min'
script data-no-instant='' InstantClick.init();
&lt;/pre&gt;

&lt;p&gt;こんな感じになります。&lt;/p&gt;

&lt;h2 id="section-3"&gt;確認&lt;/h2&gt;

&lt;p&gt;Firebugなどで確認すると、実際にマウスオーバしただけでページの読み込みが行われることが確認できました。
コンテンツサイズが大きくないので実際の体感速度はそんなに変わりませんが、他のWebにも簡単に適用できそうだということがわかりました。&lt;/p&gt;

&lt;p&gt;一方、異なるドメインへのリンクなどは先読みされませんでした。
公式にも書いてありますが、先読み可能に設定することはできないようです。
まぁ、そういうものですかね。&lt;/p&gt;

&lt;h2 id="section-4"&gt;まとめ&lt;/h2&gt;

&lt;p&gt;InstantClickを用いることで、同一Webサイト内のコンテンツを先読みすることができるようになりました。&lt;/p&gt;

&lt;p&gt;MoinMoinや他に管理しているサイトなんかでも、がんばって数十ミリ秒での応答などをやっているので、先読みができればさらに嬉しいなと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Travis CIのビルドスキップ機能について</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/03/30/skip-ci.html"/>
    <id>http://3100.github.io/blog/2014/03/30/skip-ci.html</id>
    <published>2014-03-29T15:30:00Z</published>
    <updated>2014-04-13T04:54:07+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2 id="section"&gt;概要&lt;/h2&gt;

&lt;p&gt;Travis CIにいつの間にかビルドスキップ機能が追加されていたので、
早速MiddlemanのビルドでもGithub Pages生成後の処理をスキップするようにしました。&lt;/p&gt;

&lt;h2 id="middleman"&gt;Middlemanのビルドについて&lt;/h2&gt;

&lt;p&gt;このblogはMiddlemanを用いていますが、編集用ブランチとサイト生成先ブランチ(master)を分けています。
編集用ブランチをローカルでコミットしてGithubにプッシュすると、Travis CIが自動的にmasterブランチへ静的ファイルを配置するという仕組みです。&lt;/p&gt;

&lt;p&gt;その実態はRakefileを用意して、Travis CIに叩かせるというもので、以下の記事で紹介されていたものを利用しています。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://tricknotes.hateblo.jp/entry/2013/06/17/020229"&gt;Middleman で作った web サイトを Travis + GitHub pages でお手軽に運用する - tricknotesのぼうけんのしょ&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="section-1"&gt;今までの問題点&lt;/h2&gt;

&lt;p&gt;Travis CIのビルドはmasterブランチのコミット時にも動作してしまい、.travis.ymlが見つからないためにエラーが発生していました。&lt;/p&gt;

&lt;p&gt;&lt;img alt="error log" src="/blog/2014/03/30/skip-ci/errorlog.png" /&gt;&lt;/p&gt;

&lt;p&gt;上画像のように、成功ビルドの後に失敗ビルドがつくられています。&lt;/p&gt;

&lt;p&gt;しかし、ビルドスキップを設定することで、この問題を回避できるようになりました。&lt;/p&gt;

&lt;h2 id="section-2"&gt;スキップの設定&lt;/h2&gt;

&lt;p&gt;Travis CIに特定のビルドをスキップさせる方法は単純で、コミットメッセージに&lt;code&gt;[skip ci]&lt;/code&gt;などとあれば良いということです。
上記の自動ビルドではRakefileにてコミットメッセージも設定しているので、その中に&lt;code&gt;[skip ci]&lt;/code&gt;という文字列を含むようにしました。&lt;/p&gt;

&lt;p&gt;この変更をコミットし、プッシュしたところ、無事にmaster生成後のビルドはスキップされるようになりました。&lt;/p&gt;

&lt;p&gt;&lt;img alt="success log" src="/blog/2014/03/30/skip-ci/successlog.png" /&gt;&lt;/p&gt;

&lt;p&gt;上画像のように、masterブランチ自動生成後のビルドはスキップされるようになりました。
今まで、実害はあまりないもののエラービルドが出ることで気持ちがブルーになっていましたが、そうした気分からはようやく解放されそうです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>DigitalOceanにMinecraftサーバを建てる</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/03/29/deploy-your-own-minecraft-server-on-digital-ocean.html"/>
    <id>http://3100.github.io/blog/2014/03/29/deploy-your-own-minecraft-server-on-digital-ocean.html</id>
    <published>2014-03-29T13:00:00Z</published>
    <updated>2014-04-13T04:54:07+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="Minecraft画像" src="/blog/2014/03/29/deploy-your-own-minecraft-server-on-digital-ocean/minecraft.png" /&gt;&lt;/p&gt;

&lt;h2 id="section"&gt;概要&lt;/h2&gt;

&lt;p&gt;急にMinecraftで遊びたくなることがあるのですが、複数PCにデータが散ってしまっていて、どこに目的のワールドがあるのかわかりません。
そこで、これを機にどのマシンからでも同じワールドにアクセスできるようにしようと思いました。&lt;/p&gt;

&lt;p&gt;今回は最近お世話になっているDigitalOcean上にMinecraftサーバを構築してみます。契約プランは最安($5/月)です。だいたい5人程度までなら遊べるそうです。&lt;/p&gt;

&lt;h2 id="section-1"&gt;手順&lt;/h2&gt;

&lt;h3 id="droplet"&gt;dropletの作成&lt;/h3&gt;

&lt;p&gt;まずDigitalOceanで新しいdropletを作成します。自分が選択したのは&lt;code&gt;Arch Linux 2013.05 x64&lt;/code&gt;ですが、
jreが導入できればなんでも良いと思います。&lt;/p&gt;

&lt;h3 id="section-2"&gt;サーバの初期設定&lt;/h3&gt;

&lt;p&gt;rootのままではセキュリティ上懸念も多いので、専用ユーザを作ると良いでしょう。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sshdの設定ファイルを弄ってパスワードログインをやめ、鍵交換方式にする&lt;/li&gt;
  &lt;li&gt;sshのポートをデフォルトポートから変更しておく&lt;/li&gt;
  &lt;li&gt;必要なポート以外閉じる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったことをしておくと良いのではないかと思います。&lt;/p&gt;

&lt;h3 id="jre"&gt;jreの導入&lt;/h3&gt;

&lt;p&gt;大抵のLinuxには公式リポジトリからjreパッケージが利用可能になっているのではないかと思います。&lt;/p&gt;

&lt;p&gt;Archの場合は、以下で利用可能です。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;sudo pacman -Sy
sudo pacman -S jre7-openjdk
&lt;/pre&gt;

&lt;h3 id="minecraft"&gt;minecraftサーバ用ソフトの導入&lt;/h3&gt;

&lt;p&gt;サーバ用ファイルは現時点の最新版を利用しました。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://s3.amazonaws.com/Minecraft.Download/versions/1.7.5/minecraft_server.1.7.5.jar"&gt;https://s3.amazonaws.com/Minecraft.Download/versions/1.7.5/minecraft_server.1.7.5.jar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上記ファイルを適当なフォルダに配置し、以下のコマンドでMinecraftサーバが起動します。(-d64オプションで64bit版Javaも指定可能)&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;java -Xms512M -Xmx512M -jar minecraft_server.1.7.5.jar
&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;最小確保メモリが512MB&lt;/li&gt;
  &lt;li&gt;最大確保メモリも512MB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の設定ですが、構成によって変えて良いと思います。&lt;/p&gt;

&lt;p&gt;毎回このコマンドを実行するのは面倒くさいので、適当なshファイルに上記コマンドをコピペします。(たとえばstart_server.sh)&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;chmod +x start_server.sh
&lt;/pre&gt;

&lt;p&gt;これで、start_serverと呼ぶだけでMinecraftサーバが立ち上がるようになりました。&lt;/p&gt;

&lt;h3 id="section-3"&gt;スワップ領域の作成&lt;/h3&gt;

&lt;p&gt;DigitalOceanの最小構成プランではこのままだと不安定なので、別途スワップ領域を作成する必要があります。&lt;/p&gt;

&lt;p&gt;メモリが不足した場合にSSDを仮想メモリとみなすように設定していきます。/swapfileをスワップ領域として最大512MB確保できるようにします。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;sudo fallocate -l 512M /swapfile
sudo chmod 600 /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
&lt;/pre&gt;

&lt;p&gt;また、&lt;code&gt;/etc/fstab&lt;/code&gt;を編集し、以下を追加します。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;/swapfile none  swap  defaults  0 0
&lt;/pre&gt;

&lt;p&gt;ここまででスワップ領域が利用可能になりました。
このままでも良いですが、メモリが余っている時にスワップ領域を使い続けることはパフォーマンス上あまり嬉しくないので、そのあたりもいい感じに設定します。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;sudo sysctl vm.swappiness=10
sudo sysctl vm.vfs_cache_pressure=50
&lt;/pre&gt;

&lt;h2 id="minecraft-1"&gt;Minecraftサーバ設定&lt;/h2&gt;

&lt;p&gt;特定ユーザを管理者登録するなどの設定は公式他、日本語の情報がたくさんあるので割愛します。自分は以下のサイトを参考にしました。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://nasutan.net/minecraft/server-win/serverproperties/"&gt;【サルでもわかる！初めてのマインクラフト講座】- サーバ設定 - なす探！&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="section-4"&gt;まとめ&lt;/h2&gt;

&lt;p&gt;意外と簡単にMinecraftサーバを建てることが出来ました。DigitalOceanは転送料制限がある(超えると課金される)ので心配をしていましたが、Minecraftの通信料は気にするほどではなさそうです。&lt;/p&gt;

&lt;p&gt;まだ同時接続人数が2人以上を経験していませんが、CPU使用率は30%程度です。参考にした記事にも5人から8人くらいが限度と書かれていましたが、だいたいそのくらいの人数までは遊ぶことができそうです。&lt;/p&gt;

&lt;p&gt;$5/月くらいなら仲間うちで割り勘しても良いくらいのコストですし、Minecraftサーバ、結構オススメです。&lt;/p&gt;

&lt;h2 id="section-5"&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://otoris.com/host-your-own-minecraft-and-mumble-server-for-5month/"&gt;Host your own Minecraft server for $5/month&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.digitalocean.com/community/articles/how-to-add-a-swap-file-on-an-arch-linux-cloud-server"&gt;How to Add a Swap File on an Arch Linux Cloud Server - DigitalOcean&lt;/a&gt;&lt;/p&gt;

</content>
  </entry>
</feed>
