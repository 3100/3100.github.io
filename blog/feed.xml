<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Room 3100</title>
  <subtitle>Nothing to see here, citizen.</subtitle>
  <id>http://3100.github.io/blog</id>
  <link href="http://3100.github.io/blog"/>
  <link href="http://3100.github.io/blog/feed.xml" rel="self"/>
  <updated>2014-06-27T13:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Slackを使ってみた感想</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/06/27/first-impression-of-slack.html"/>
    <id>http://3100.github.io/blog/2014/06/27/first-impression-of-slack.html</id>
    <published>2014-06-27T13:00:00Z</published>
    <updated>2014-06-27T13:50:55+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2 id="section"&gt;経緯&lt;/h2&gt;

&lt;p&gt;いまだに&lt;code&gt;IP Messenger&lt;/code&gt;が幅をきかす社内ですが、技術的興味が似ている若手社員の間では色々チャットサービスを試しています。&lt;/p&gt;

&lt;p&gt;過去の変遷は&lt;a href="http://lingr.com/"&gt;lingr&lt;/a&gt; → &lt;a href="http://www.codefirst.org/AsakusaSatellite/"&gt;AsakusaSatellite&lt;/a&gt; → &lt;a href="http://kato.im/"&gt;kato.im&lt;/a&gt;で、ここ数ヶ月ほどは&lt;code&gt;kato.im&lt;/code&gt;がお気に入りでした。
検討したサービスには&lt;a href="https://www.hipchat.com/"&gt;hipchat&lt;/a&gt;や&lt;a href="http://www.chatwork.com/ja/"&gt;chatwork&lt;/a&gt;などもありましたが、見た目が&lt;code&gt;kato.im&lt;/code&gt;ほどではないことなどから、食指が動きません。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;kato.im&lt;/code&gt;の欠点は&lt;code&gt;hipchat&lt;/code&gt;が人数無制限無料となった今も10人を超えると課金対象になることです。($5ppmなので課金開始額は$50pm。)
&lt;code&gt;AsakusaSatellite&lt;/code&gt;から導入していた&lt;a href="https://hubot.github.com/"&gt;hubot&lt;/a&gt;も立派に1人としてカウントされるため、実質9人までしか同じログを共有することができません。
利用者が10人を超えていたので、結果としてログイン頻度や発言数などによって人が2つのグループを行き来するという運用になっていました。&lt;/p&gt;

&lt;p&gt;一方、最近巷で話題の&lt;a href="https://slack.com/"&gt;slack&lt;/a&gt;は&lt;code&gt;hipchat&lt;/code&gt;を意識してなのかそうでないのか、人数無制限無料です。また、ビジュアル的にもいい感じであることが事前に確認されていました。
そこで、今回試験的に導入してみることにしました。&lt;/p&gt;

&lt;h2 id="section-1"&gt;個人的に重視する部分&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;使いやすいチャット機能&lt;/li&gt;
  &lt;li&gt;Wikiを置き換えたい&lt;/li&gt;
  &lt;li&gt;見た目&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;7年近く運用している&lt;code&gt;moinmoin&lt;/code&gt;をそろそろ違うWikiに置き換えたい機運が高まっています。
似たような用途で、&lt;a href="https://github.com/volpe28v/DevHub"&gt;devhub&lt;/a&gt;を運用しているチームもいますが、できれば長期にわたる使用に耐えられるようなものが望ましいです。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id="section-2"&gt;いいところ&lt;/h2&gt;

&lt;h3 id="ui"&gt;UIが変態的だけどなかなか爽快&lt;/h3&gt;

&lt;p&gt;初めてログインすると、画面のあちこちに円形のマーキングがされたりして、今っぽさを感じます。
決して使いやすい素直なUIではありませんが、デザインにこだわりを感じます。&lt;/p&gt;

&lt;h3 id="section-3"&gt;スニペット機能や記事投稿機能が便利&lt;/h3&gt;

&lt;p&gt;コードスニペットや記事投稿機能のあるチャットシステムというのが意外性あります。&lt;code&gt;Devhub&lt;/code&gt;で経験している機能ですが、より洗練された印象を受けます。&lt;/p&gt;

&lt;h3 id="section-4"&gt;過去に遡って発言を訂正できる&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;kato.im&lt;/code&gt;では直前の発言のみ1分間だけ修正可能という仕様でした。
このルール内でネタ発言を歴史に刻むかどうかの壮大なチキンレースが繰り広げられたりすることもありましたが、やはり不便です。&lt;/p&gt;

&lt;p&gt;いつでも発言を訂正できるというのは、言質を重視する開発現場では欠点かもしれませんが、やはり必要な機能だと思います。&lt;/p&gt;

&lt;h3 id="hubot"&gt;hubot対応&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;hubot&lt;/code&gt;に何をさせているかといえば、本当に大したことはさせていませんが、僕達には必要不可欠なおもちゃです。&lt;/p&gt;

&lt;p&gt;&lt;img alt="slack" src="/blog/2014/06/27/first-impression-of-slack/slack.png" /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id="section-5"&gt;悪いところ&lt;/h2&gt;

&lt;h3 id="section-6"&gt;利用料金は高め&lt;/h3&gt;

&lt;p&gt;基本無料ではありますが、課金段階においてはユーザ単価が高め($8ppm〜)なのが気になります。&lt;/p&gt;

&lt;p&gt;また、他のサービスとの連携も無料版は5種類に制限されているので、やや不便です。&lt;/p&gt;

&lt;h3 id="ui-1"&gt;UIに慣れるまで目的のことをするのが難しい&lt;/h3&gt;

&lt;p&gt;驚き最小の原則には反している気がします。例えば、ユーザやチャンネルの右側にある☓ボタンは、自分から見えなくするだけです。削除ボタンかな？という印象を受けます。
チームのホーム画面とチャット画面の行き来も最初はとまどいます。&lt;/p&gt;

&lt;h3 id="gfmgithub-flavored-markdown"&gt;GFM(Github Flavored Markdown)ではない&lt;/h3&gt;

&lt;p&gt;なぜだ。&lt;/p&gt;

&lt;h3 id="section-7"&gt;スニペットや記事にタグ付けできない&lt;/h3&gt;

&lt;p&gt;あくまでチャットの補助機能という位置づけなのでしょうか。
個人的にはここが拡充されれば色々なサービスを喰う存在になると予想します。&lt;/p&gt;

&lt;h3 id="section-8"&gt;1画面に複数チャンネルを表示できない&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;hootsuite&lt;/code&gt;や&lt;code&gt;kato.im&lt;/code&gt;に慣れている人間にはやや不便です。&lt;/p&gt;

&lt;h3 id="huboturlheroku"&gt;hubotにURLが必要なのでherokuなどを使うことになる&lt;/h3&gt;

&lt;p&gt;使用上の制限なんでしょうか。従来は&lt;code&gt;digitalocean&lt;/code&gt;上で動かしていましたが、仕方なく&lt;code&gt;heroku&lt;/code&gt;へ移行させました。&lt;/p&gt;

&lt;p&gt;話がずれますが、&lt;a href="http://wercker.com/"&gt;wercker&lt;/a&gt;は便利ですね。githubへのプッシュからの自動デプロイが簡単です。&lt;code&gt;travis-ci&lt;/code&gt;の時はもうちょっと面倒だった記憶があります。&lt;/p&gt;

&lt;h2 id="section-9"&gt;まとめ&lt;/h2&gt;

&lt;p&gt;残念だったのは記事機能です。現時点ではタグやカテゴリといった機能は存在せず、キーワード検索か最新記事一覧から閲覧せざるを得ません。慣れの問題かもしれませんが、検索性や俯瞰性に難ありでしょう。&lt;/p&gt;

&lt;p&gt;結論としては、&lt;code&gt;kato.im&lt;/code&gt;から移行して引き続き利用していくことになったものの、Wikiを完全に代替できるわけではなく、機能改良が望まれるかあるいは諦めるかという感じになりました。&lt;/p&gt;

&lt;p&gt;尚、運用中のhubotは以下に公開されています。少しだけ独自スクリプトもあります。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/3100/slack-hubot"&gt;3100/slack-hubot&lt;/a&gt;&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>DigitalOceanのSnapshotが壊れる？</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/06/06/broken-snapshot-on-digital-ocean.html"/>
    <id>http://3100.github.io/blog/2014/06/06/broken-snapshot-on-digital-ocean.html</id>
    <published>2014-06-05T23:30:00Z</published>
    <updated>2014-06-27T13:50:55+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2 id="section"&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://cloud.digitalocean.com/"&gt;DigitalOcean&lt;/a&gt;で
&lt;code&gt;snapshot&lt;/code&gt;から&lt;code&gt;droplet&lt;/code&gt;を作ろうとしたら
うまくいっていないというお話。&lt;/p&gt;

&lt;h2 id="section-1"&gt;経緯&lt;/h2&gt;

&lt;p&gt;DigitalOceanで動かしているMinecraftサーバーは
サンフランシスコリージョンにあります。
これをシンガポールに移したらネットワーク遅延が減って、
体感速度も速くならないかな？ということで
実際にスナップショットを取って試してみました。&lt;/p&gt;

&lt;h2 id="section-2"&gt;試行1&lt;/h2&gt;

&lt;p&gt;スナップショットをリージョン転送して
新規にドロップレットを作成するだけの簡単なお仕事、のはず。
しかし、ドロップレット作成最後の15秒で何度やってもエラーとなりました。&lt;/p&gt;

&lt;p&gt;もしかして&lt;code&gt;Power Off&lt;/code&gt;を使うのはダメで、きちんと&lt;code&gt;shutdown&lt;/code&gt;する必要があるのかな。。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://groups.google.com/forum/#!topic/packer-tool/bSlP8dELiM"&gt;DigitalOcean - file content disappears after image and new droplet creation - Google グループ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;尚、各処理にかかる時間ですが&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;スナップショット作成は使い方にもよるだろうけど、今回は数分で完了。&lt;/li&gt;
  &lt;li&gt;サンフランシスコからシンガポールへのスナップショット転送は、30分程度かかる。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="section-3"&gt;試行2&lt;/h2&gt;

&lt;p&gt;今度はきちんとシャットダウンしてからスナップショットを作成し、現在リージョン転送中。&lt;/p&gt;

&lt;p&gt;しかし、結果は変わらず。&lt;/p&gt;

&lt;h2 id="section-4"&gt;試行3&lt;/h2&gt;

&lt;p&gt;生成先をサンフランシスコにして試してみた。ら、動きました。
どうやらスナップショットが壊れているわけではなさそうですね。&lt;/p&gt;

&lt;p&gt;結局サポートからチケットを作成して、現在質問中。&lt;/p&gt;

&lt;h2 id="section-5"&gt;正解(2014/06/18追記)&lt;/h2&gt;

&lt;p&gt;技術スタッフにイシュー投げとくと言われた後、ずっと放置だったのですが、2週間弱して反応がありました。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;# touch /etc/network.d/ethernet-static
&lt;/pre&gt;

&lt;p&gt;をしてから、再度スナップショットを作って、試して欲しい、と。&lt;/p&gt;

&lt;p&gt;指示どおりに行ったところ、無事dropletの作成に成功しました。
しかし、&lt;code&gt;ssh&lt;/code&gt;はできないので、Webコンソールから各種ネットワーク設定を見直します。その際には以下の記事が大いに役に立ちました。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://wiki.archlinux.org/index.php/Network_Configuration_(%E6%97%A5%E6%9C%AC%E8%AA%9E)"&gt;Network Configuration (日本語) - ArchWiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回のケースでは、&lt;code&gt;/etc/conf.d/network@eth0&lt;/code&gt;の中身が古いIPのままだったので、これを最新のものに変更する必要がありました。
netmask値も24から18に変わったり。
このあたりはリージョンによるのか、dropletによるのか、興味深いです。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;# systemctl restart network@eth0
&lt;/pre&gt;

&lt;p&gt;以上で、無事に外部からも接続できるようになりました。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>XVimをXCodeに導入した</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/04/28/begin-using-xvim.html"/>
    <id>http://3100.github.io/blog/2014/04/28/begin-using-xvim.html</id>
    <published>2014-04-28T13:00:00Z</published>
    <updated>2014-06-27T13:50:55+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2 id="section"&gt;概要&lt;/h2&gt;

&lt;p&gt;XCodeを触っていると、いつもの癖でVim用のキーを入力してしまい、なかなか慣れません。
どうしたものかと調べてみたところ、&lt;code&gt;XVim&lt;/code&gt;なるものがあるらしいと知り、早速導入してみました。&lt;/p&gt;

&lt;h2 id="section-1"&gt;導入&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/Jugglershu/XVim"&gt;https://github.com/Jugglershu/XVim&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;導入の仕方は上記URLに書いてある通りです。
一見するとmasterブランチの更新が止まっているように見えますが、XCode5向けの開発はブランチで行われているようです。
XCode5向けに導入する場合は、ブランチを変更するなどの操作が必要となりますので注意して読みましょう。&lt;/p&gt;

&lt;p&gt;設定ファイルは$HOME/.xvimrcになるようです。.vimrcと100%互換があるわけではなく、使用可能な書式は制限されています。
が、とりあえずvim風に使えるようになったことでも、満足です。
VisualStudioの&lt;code&gt;VsVim&lt;/code&gt;と同様に、欠かせないプラグインになりそうです。&lt;/p&gt;

&lt;p&gt;尚、XVimについては、以下の記事で知りました。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://blog.lciel.jp/blog/2014/03/17/installation-of-xvim/"&gt;XVim を Xcode 5.1 にインストール - Unmotivated&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="xvim"&gt;おまけ(XVimで満足できない方向け)&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://ap4y.github.io/2013/11/10/vim-for-ios-developers.html"&gt;Vim for iOS developers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rakeなどを用いてvim上で全部やろうという記事です。去年の11月に書かれたものなので、そんなに古くなさそうです。
ざっと目を通した感じ、&lt;code&gt;Dash&lt;/code&gt;なんかも&lt;code&gt;dash.vim&lt;/code&gt;を使ったり、補完もclang向けのライブラリを使ったり、&lt;code&gt;ag.vim&lt;/code&gt;まで持ち出したりと
結構ガチな内容です。&lt;/p&gt;

&lt;p&gt;そこまで試せていませんが、とことん突き詰めたい方向けの記事なのではないかと思います。
誰もはてブしてないので、とりあえずしておきました。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>サーバOSとしてのArch Linux</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/04/26/arch-linux-as-server-os.html"/>
    <id>http://3100.github.io/blog/2014/04/26/arch-linux-as-server-os.html</id>
    <published>2014-04-26T03:00:00Z</published>
    <updated>2014-06-27T13:50:55+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2 id="section"&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Arch&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;個人的には一番使いやすいLinuxディストロだと思うのですが、2014年現在、世間的にはUbuntuやCentOS、Debianなどの後塵を拝し、Gentooなどと共にキワモノ的なカテゴリに分けられることが多いと感じています。
ここでは、特にサーバ用途として考えた際に、なぜArchが選ばれないのか、調べてみることにしました。
(といっても主にネットの声だけで)&lt;/p&gt;

&lt;h2 id="arch8"&gt;Archが選ばれない理由8個&lt;/h2&gt;

&lt;h3 id="update"&gt;その1。Updateで既存環境がいつどこで壊れるか予想がつかない&lt;/h3&gt;

&lt;p&gt;Archは主要ディストロと異なり、メジャーバージョンというものがありません。つまりCentOS 5から6へのアップデートといったものはなく、常にどこかしこのパッケージがアップデートされています。(いわゆるローリングリリースモデル)&lt;/p&gt;

&lt;p&gt;また、公式サイトでは約1ヶ月おきごとに、配布バイナリが更新されます。
これは一見良さそうです。何しろ世間には&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ubuntu 14.04へ移行したらXXが動かなくなった&lt;/li&gt;
  &lt;li&gt;CentOS 6を導入したけど、XXXパッケージが古すぎる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といった阿鼻叫喚が飛び交っています。Archならこういった問題とは大抵の場合無縁です。&lt;/p&gt;

&lt;p&gt;しかし常にどこかしこでアップデートが起こっているということは、各パッケージの依存関係の問題で今動いているサービスが動かなくなるということもあり得るということです。
この問題に対するArch利用者側のよくある反応については、以下の記事に素晴らしい例があったので、引用します。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;しかし、ローリングリリースは壊れやすいとからかうと、Arch上級者様は皆、まるで申し合わせたかのように言う。

「何？　壊れる？　まさか？　ちゃんと公式から発行される変更情報や注意点を確認していれば、壊れるなどということはない。よしんばブート不可能なほど壊れたにせよだ。復旧用のArchを入れたUSBドライブからブートしてchrootとしてpackman -Syuすればたいてい直る。問題ない。設定ファイルもプレインテキストで書かれていて、とても簡単だ。恐れることなど何もない。むしろUbuntuのようなどうやって直していいのかわからない複雑なシステムの方が怖いわ」と。
&lt;/pre&gt;

&lt;p&gt;&lt;a href="http://cpplover.blogspot.jp/2013/11/mac.html?m=1"&gt;本の虫: 技術屋にMac使いが多い理由ってなに？&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;いや、ほんとコレなんですけどね。他ディストロのような&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;バージョンXXからあの機能が廃止になって、新機能が追加された&lt;/li&gt;
  &lt;li&gt;バージョンXXXにあるこの機能はバグだ。違うパッケージで対応しよう&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;みたいな方が個人的には恐ろしいし、そういったノウハウがやがて秘伝のタレ化していくんじゃないのかなという印象を受けます。&lt;/p&gt;

&lt;h3 id="os"&gt;その2。俺達はOSを弄りまわしたいんじゃない。サービスを立ち上げたいだけなんだ&lt;/h3&gt;

&lt;p&gt;ぐぅの音も出ません。&lt;/p&gt;

&lt;p&gt;しかし、自分も割りと同様の理由でArchを採用しています。こうした意見はおそらくローリングリリースに関しての意見だと思いますが、良い所もあります。
それは、メンテナのいるパッケージであれば大抵すぐに最新版が利用可能になるということです。
nginxやvimのバージョンが上がったらしい。
じゃ、ビルドするか。。とならないのは1つのメリットかなと思います。Archならすぐにパッケージマネージャから更新可能です。&lt;/p&gt;

&lt;p&gt;もちろん、デフォルトで提供されているパッケージの設定では不満が出ることもありますし、そういう場合にはソースコードからビルドします。その辺りは他のディストロと同じです。&lt;/p&gt;

&lt;p&gt;また、Archの公式Wikiは情報量が豊富で、一部は日本語に翻訳もされています。
よく使われるようなものについてはここで導入方法やオプション、注意点などについての知見を得ることができるでしょう。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.archlinux.org/"&gt;Arch Linux 公式サイト&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://wiki.archlinux.org/"&gt;ArchWiki&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="section-1"&gt;その3。我々は長期の安定稼働を求めている。再現性も重要だ。&lt;/h3&gt;

&lt;p&gt;バージョンがきちんと振られるディストロでは、関係者が増えても共通の環境を整備しやすく、また後々になってその環境を再現しなくならなければいけない状況になった場合でも、割りと楽に目的のイメージファイルなりを見つけることができます。&lt;/p&gt;

&lt;p&gt;逆にArchの場合、導入タイミングなどで各サーバのパッケージが異なっているといった事態は容易に起こり得ますし、これがサポートの手間になるということもあるでしょう。(実際に&lt;code&gt;DigitalOcean&lt;/code&gt;がそんな感じの理由でサポートを廃止予定)
ですので、Archを導入する場合にはどのパッケージをどのバージョンで採用するか、といった調整は必要になります。
一見面倒くさいですし、他のディストロではやらなかった作業ですので、現場の不満は貯まるかもしれないですね。。&lt;/p&gt;

&lt;p&gt;しかし、視点を数年後にずらして考えると、逆にバージョンごとに区切られていることが問題となることがあります。というか個人的にはよく見かけます。特に元プロジェクトから数度にわたって改良されてきたプロジェクトでは、改良の度に最小限の修正しか行われないことがあります。
よくあるのは&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使うパッケージが古いもので固定されてしまう(脆弱性や非互換の問題は黙殺)&lt;/li&gt;
  &lt;li&gt;5年後くらいに唐突に納入物の更新要望が来るが、もちろんパッケージなどは更新できない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などといったもので、よく考えずとも明らかにお客さんと現場双方で不幸になっています。こうした事例は一般的ではないのかもしれませんが、官公庁でいまだにStruts1で構築されたサービスが動いているという話を見ても、決してレアケースではないと思います。&lt;/p&gt;

&lt;p&gt;サービスの長期的なメンテナンスを考えると、ぱっと見のとっつきやすさが全体のためになるかどうかは別問題ではないでしょうか。&lt;/p&gt;

&lt;h3 id="systemd"&gt;その4。systemdなんてよくわからない代物は使えない。&lt;/h3&gt;

&lt;p&gt;よくあるLinuxの入門書ではCentOSやDebianを対象ディストロとしているものが多く、initやUpstartに慣れ親しんだ人が多いでしょう。しかしArchは2012年より&lt;code&gt;systemd&lt;/code&gt;を採用しています。&lt;/p&gt;

&lt;p&gt;そのため、既存のLinuxサーバ管理者からすると、Archを利用する場合には「余計な」学習コストが発生します。「今すでに動いているものがあるのに、何故わざわざ違うものを勉強し直す必要があるんだ」といった感じの意見は割りとよく聞きますし、個人的には色々とツッコミを入れたい考え方でもありますが、そのお気持ち自体はわかります。&lt;/p&gt;

&lt;p&gt;しかし、時代は変わっていきます。systemdは&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Arch以外でもFedoraやopenSUSEなどで導入済&lt;/li&gt;
  &lt;li&gt;RHEL(つまるところCentOSも)でもVersion 7から導入予定&lt;/li&gt;
  &lt;li&gt;Debianも次期メジャーリリースであるJessieから採用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったように、次の時代のサービス管理ツールとしてほぼ絶対的な位置にいます。
Ubuntuは依然Upstartを採用していますが、移行を提案する人も出ているようですし、次のLTSまでにsystemdを採用するかもしれません。&lt;/p&gt;

&lt;p&gt;最近はsystemdに関する日本語の資料も増えてきていますし、そろそろ触っておいても良いのではないかと思います。&lt;/p&gt;

&lt;h3 id="section-2"&gt;その5。インストールが大変&lt;/h3&gt;

&lt;p&gt;公式Wikiには日本語でも丁寧な導入ガイドがあり、それに従えば何ら問題なくインストールできます。
が、CentOSやDebianなどのインストールのしやすさに比べれば、色々と設定しなくてはいけない部分が多い気がします。&lt;/p&gt;

&lt;p&gt;しかし、そういった部分にもきちんと触れることで、Linuxユーザとしても成長しますし、OSへの深い理解も得られるのではないでしょうか。&lt;/p&gt;

&lt;p&gt;本音ベースですと、やっぱり面倒くさいです。ですが、実際問題としては気になりません。というのも&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;インストール直後の状態を仮想イメージで持っておけば良い&lt;/li&gt;
  &lt;li&gt;最近ではchefやansibleがある&lt;/li&gt;
  &lt;li&gt;docker用コンテナのイメージもdocker側で用意されている&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ので、今後いちから人が手動でインストーラを叩いて設定するなんてことは減っていくからです。むしろ、現状そうした環境になっていない場合は猛省して、速やかに環境整備して自動化へと移行すべきかと思います。&lt;/p&gt;

&lt;p&gt;100台近いサーバを日々手作業でOSインストールして
構築するお仕事、というのを実際に聞いたことがありますが、それは人のやる仕事ではありません。。&lt;/p&gt;

&lt;h3 id="pacman"&gt;その6。pacmanなんて独自ツールは覚えたくない&lt;/h3&gt;

&lt;p&gt;そんなことより、個人的には商標権とか大丈夫なのかなって思ったりしています。これが&lt;code&gt;micky&lt;/code&gt;ていう名前だったら間違いなく訴えられていると思います。&lt;/p&gt;

&lt;p&gt;pacman、たしかにaptitudeとかと比べて最初は良くわかりませんし、できることも多いですが、個人的には好きです。&lt;/p&gt;

&lt;h3 id="haskell"&gt;その7。Haskellを簡単に導入できない&lt;/h3&gt;

&lt;p&gt;サーバサイドHaskellとか胸熱ですが、完全に門外漢です。Archにはユーザが独自に作成、登録したパッケージを導入する仕組みがあり、そこにHaskellの各種ライブラリも登録されています。&lt;/p&gt;

&lt;p&gt;が、これは罠です。実際に&lt;code&gt;pandoc&lt;/code&gt;を入れようとしてかなりハマりました。諦めてHaskell公式からソースコードを入手し、手動でセットアップしましょう。&lt;/p&gt;

&lt;h3 id="arch"&gt;その8。そもそもArchなんて誰も使っていない&lt;/h3&gt;

&lt;p&gt;(´・ω:;.:…&lt;/p&gt;

&lt;h2 id="section-3"&gt;まとめ&lt;/h2&gt;

&lt;p&gt;ここまで見てきて、ArchをサーバOSにしないのは、単に&lt;strong&gt;趣味&lt;/strong&gt;や&lt;strong&gt;主義主張&lt;/strong&gt;の問題か、あとは単に担当者や責任者の理解不足であるような気がしてきました。&lt;/p&gt;

&lt;p&gt;ArchはGentoo同様、とっつきづらいイメージがありますが、最初のインストールさえ乗り越えられれば、比較的メンテナンスのしやすいディストロだと思います。
ネット上を探せば、仮想環境向けにも色々とイメージファイルが公開されているので、そうしたものを使えばインストールさえ不要です。&lt;/p&gt;

&lt;p&gt;何より軽量軽快で、ディスクサイズやメモリサイズも主要ディストロに比べて小さくて済みます。&lt;/p&gt;

&lt;p&gt;ぜひ、気軽に触ってもらいたいと思います。&lt;/p&gt;

&lt;h2 id="section-4"&gt;参考になった記事など&lt;/h2&gt;

&lt;p&gt;記事で言及したもの、しなかったもの含めて。最後のやつはネタですね。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://serverfault.com/questions/173286/is-arch-linux-suitable-for-server-environment"&gt;Is Arch Linux suitable for server environment? - Server Fault&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://gihyo.jp/admin/clip/01/ubuntu-topics/201402/21"&gt;2014年2月21日号　systemdへの移行、Ubuntu Phoneの採用状況、UWN#355:Ubuntu Weekly Topics - gihyo.jp … 技術評論社&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.reddit.com/r/archlinux/comments/1f26hg/why_does_haskell_suck_on_arch/"&gt;Why does Haskell suck on Arch? : archlinux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://fomori.org/blog/?p=468"&gt;Why arch linux sucks for servers - SLEIPNIR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://springfieldpc.dyndns.org/gcopypasta/116-gnulinux/archlinux/418-top-5-reasons-why-arch-linux-sucks"&gt;Top 5 Reasons why Arch Linux suck&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>DigitalOceanがArchの提供をやめるらしい</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/04/13/digitalocean-are-deprecating-arch.html"/>
    <id>http://3100.github.io/blog/2014/04/13/digitalocean-are-deprecating-arch.html</id>
    <published>2014-04-13T03:00:00Z</published>
    <updated>2014-06-27T13:50:55+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="snap" src="/blog/2014/04/13/digitalocean-are-deprecating-arch/snapshot.png" /&gt;&lt;/p&gt;

&lt;h2 id="section"&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.digitalocean.com/"&gt;DigitalOcean&lt;/a&gt;が&lt;code&gt;Arch&lt;/code&gt;イメージの提供を廃止予定だそうです。その理由ですが&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使っているユーザがそれほど多くない&lt;/li&gt;
  &lt;li&gt;ローリングアップデートに対応する労力を避けない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とのこと。&lt;code&gt;Arch&lt;/code&gt;の素晴らしさが世間に十分認知されず、とても残念です。&lt;/p&gt;

&lt;h2 id="section-1"&gt;私見&lt;/h2&gt;

&lt;p&gt;個人的には&lt;code&gt;Docker&lt;/code&gt;が安定すればその上で&lt;code&gt;Arch&lt;/code&gt;を動かせばいいやと思っているので、すぐ代替先を探そう！とはなりません。が、&lt;code&gt;Docker 0.10&lt;/code&gt;では&lt;code&gt;systemd&lt;/code&gt;がうまく動作しない問題があるため、そちらが早く治ってくれるといいなぁ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/dotcloud/docker/issues/3629"&gt;running systemd inside docker arch container hangs or segfaults · Issue #3629 · dotcloud/docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最近は複数の&lt;code&gt;Docker&lt;/code&gt;コンテナでクラスタを構築できる&lt;code&gt;CoreOS&lt;/code&gt;も気になってはいるので、そういうものも&lt;code&gt;DigitalOcean&lt;/code&gt;上で動かしたい欲求があります。&lt;/p&gt;

&lt;p&gt;独自イメージのアップロード機能や、&lt;code&gt;CoreOS&lt;/code&gt;イメージの提供を求める声も多いのですが、その辺もあまり進捗はないみたいですね。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="http://digitalocean.uservoice.com/forums/136585-digitalocean/suggestions/3276477-allow-custom-images"&gt;Allow Custom Images – Customer Feedback for Digital Ocean&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="http://digitalocean.uservoice.com/forums/136585-digital-ocean/suggestions/4250154-suport-coreos-as-a-deployment-platform"&gt;Suport CoreOS as a deployment platform – Customer Feedback for Digital Ocean&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一時期は&lt;code&gt;AWS&lt;/code&gt;型の重厚なサービスではなく、&lt;code&gt;DigitalOcean&lt;/code&gt;のような軽量なサービスこそ次の主流になる、と思っていたのですが、サービス品質や姿勢についてはまだまだこれからかなという印象を抱いています。それでも価格を考えれば良いものを提供していることはわかります。ぜひとも頑張って欲しいです。&lt;/p&gt;

&lt;p&gt;それにしても、イメージファイルのメンテや追加ってそんなに大変なのだろうか。もしかすると提供速度やスケールメリットを活かした独自構成がその辺りを犠牲にしているのかもしれないですね。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Objective-Cへ入門</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/04/10/learn-objective-c-again.html"/>
    <id>http://3100.github.io/blog/2014/04/10/learn-objective-c-again.html</id>
    <published>2014-04-10T14:00:00Z</published>
    <updated>2014-06-27T13:50:55+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;iOS用アプリ開発。
数年前に挑戦した時は、あまりの文法の気持ち悪さに断念しました。&lt;/p&gt;

&lt;p&gt;しかし、RubyMotionを触っているうちに結局Objective-Cや
iOS SDKを勉強した方が良いなと思い始め、改めて再入門することにしました。
それにあたって、以下の本を購入しました。&lt;/p&gt;

&lt;h2 id="section"&gt;継続的インテグレーション&lt;/h2&gt;

&lt;div class="amazlet-box" style="margin-bottom:0px;"&gt;&lt;div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798040894/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/51dc8HfwK8L._SL160_.jpg" alt="iOSアプリ テスト自動化入門" style="border: none;" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"&gt;&lt;div class="amazlet-name" style="margin-bottom:10px;line-height:120%"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798040894/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;iOSアプリ テスト自動化入門&lt;/a&gt;&lt;div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%"&gt;posted with &lt;a href="http://www.amazlet.com/" title="amazlet" target="_blank"&gt;amazlet&lt;/a&gt; at 14.04.10&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-detail"&gt;長谷川 孝二 &lt;br /&gt;秀和システム &lt;br /&gt;売り上げランキング: 2,341&lt;br /&gt;&lt;/div&gt;&lt;div class="amazlet-sub-info" style="float: left;"&gt;&lt;div class="amazlet-link" style="margin-top: 5px"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798040894/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-footer" style="clear: left"&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;趣味のWebアプリならともかくも、普段の仕事ではテストの自動化が片手間でしかなくて、そういった部分が嫌なのでiOSアプリを作るなら最低でもTDDでやりたいと思っています。&lt;/p&gt;

&lt;p&gt;この本はテスト自動化について簡単な概念から始まって、CIやBDDのフレームワーク紹介なんかも取り扱っています。各ライブラリについては使っているうちに別途詳しく調べる必要が出てくるだろうけれど、最近の開発スタイルについて俯瞰するのには良い1冊な気がしました。&lt;/p&gt;

&lt;p&gt;とりあえず数時間で読んでしまえるくらいの記述量で、通勤時間のお供にも良いかもしれません。&lt;/p&gt;

&lt;h2 id="ios"&gt;iOSへの入門書&lt;/h2&gt;

&lt;div class="amazlet-box" style="margin-bottom:0px;"&gt;&lt;div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4800710227/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/5108ukII8yL._SL160_.jpg" alt="詳細! Objective-C iPhoneアプリ開発 入門ノート Xcode5+iOS7対応" style="border: none;" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"&gt;&lt;div class="amazlet-name" style="margin-bottom:10px;line-height:120%"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4800710227/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;詳細! Objective-C iPhoneアプリ開発 入門ノート Xcode5+iOS7対応&lt;/a&gt;&lt;div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%"&gt;posted with &lt;a href="http://www.amazlet.com/" title="amazlet" target="_blank"&gt;amazlet&lt;/a&gt; at 14.04.10&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-detail"&gt;大重 美幸 &lt;br /&gt;ソーテック社 &lt;br /&gt;売り上げランキング: 2,726&lt;br /&gt;&lt;/div&gt;&lt;div class="amazlet-sub-info" style="float: left;"&gt;&lt;div class="amazlet-link" style="margin-top: 5px"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4800710227/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-footer" style="clear: left"&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;後述のObjective-C本に比べて図が大きく見やすいです。こうした入門書はあまり好きではないのですが、苦手意識がある場合には大変心強いです。
ざっくり目を通した感じでは、文法部分は必要最低限といった感じで、どちらかというとXCodeを使って実際に簡単なアプリを作っていくことで、基礎力をつけられる構成になっています。&lt;/p&gt;

&lt;p&gt;プログラム初心者向けにも見えるけど、そんなに概念を掘り下げて説明しないので、完全な初心者には少し厳しいかもしれないです。他の言語で開発している人なら問題ないでしょう。&lt;/p&gt;

&lt;p&gt;きちんと手を動かしていくことが大事ですが、1週間あれば1周できるくらいの量ではないかと思います。&lt;/p&gt;

&lt;div class="amazlet-box" style="margin-bottom:0px;"&gt;&lt;div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774163856/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/618Wj6bBw1L._SL160_.jpg" alt="iOSアプリエンジニア養成読本[クリエイティブな開発のための技術力/デザイン力/マインドを養う! ] (Software Design plus)" style="border: none;" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"&gt;&lt;div class="amazlet-name" style="margin-bottom:10px;line-height:120%"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774163856/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;iOSアプリエンジニア養成読本[クリエイティブな開発のための技術力/デザイン力/マインドを養う! ] (Software Design plus)&lt;/a&gt;&lt;div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%"&gt;posted with &lt;a href="http://www.amazlet.com/" title="amazlet" target="_blank"&gt;amazlet&lt;/a&gt; at 14.04.10&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-detail"&gt;高橋 俊光 諏訪 悠紀 湯村 翼 平屋 真吾 平井 祐樹 &lt;br /&gt;技術評論社 &lt;br /&gt;売り上げランキング: 464&lt;br /&gt;&lt;/div&gt;&lt;div class="amazlet-sub-info" style="float: left;"&gt;&lt;div class="amazlet-link" style="margin-top: 5px"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774163856/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-footer" style="clear: left"&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;開発を始める前に読むべき、といった取り扱いをされているので買ってみました。良くも悪くも各要素のつまみ食いといった感じで、必ずしも必要ではないのではないかと感じました。
特にgitやjenkins、travis-ciなんかを普段から使っている開発者の方は、他の本で知識を補えば立ち読みでも十分だと思います。&lt;/p&gt;

&lt;p&gt;内容自体は面白いしタメになりそうな記事もあるので、開発が進んでいくにつれてふと気楽に読み直すというスタンスが良さそうです。(あるいは新人教育への需要があるのかもしれません。明日までに読んでおけ、的な)&lt;/p&gt;

&lt;p&gt;売り上げランキングはさすがといった感じで、今回購入した中で最も人気の1冊でした。&lt;/p&gt;

&lt;h2 id="objective-c"&gt;Objective-C&lt;/h2&gt;

&lt;div class="amazlet-box" style="margin-bottom:0px;"&gt;&lt;div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797368276/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/41VdFg9YqsL._SL160_.jpg" alt="詳解 Objective-C 2.0 第3版" style="border: none;" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"&gt;&lt;div class="amazlet-name" style="margin-bottom:10px;line-height:120%"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797368276/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;詳解 Objective-C 2.0 第3版&lt;/a&gt;&lt;div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%"&gt;posted with &lt;a href="http://www.amazlet.com/" title="amazlet" target="_blank"&gt;amazlet&lt;/a&gt; at 14.04.10&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-detail"&gt;荻原 剛志 &lt;br /&gt;ソフトバンククリエイティブ &lt;br /&gt;売り上げランキング: 9,586&lt;br /&gt;&lt;/div&gt;&lt;div class="amazlet-sub-info" style="float: left;"&gt;&lt;div class="amazlet-link" style="margin-top: 5px"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797368276/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-footer" style="clear: left"&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通称萩原本？第2版は持っていますが、せっかくなので買い直しました。Objective-C
の文法について日本語で最も詳しい書籍なのではないでしょうか。
これから事あるごとに参照することになりそうです。じっくり取り組むべき本。&lt;/p&gt;

&lt;p&gt;iOS5に向けて書かれた本ですし、個人的にはそろそろ第4版が出るのではないかとも思っています。(過去の更新間隔的にも。。)&lt;/p&gt;

&lt;div class="amazlet-box" style="margin-bottom:0px;"&gt;&lt;div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798134198/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/51BbaG2KA1L._SL160_.jpg" alt="Effective Objective-C 2.0" style="border: none;" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"&gt;&lt;div class="amazlet-name" style="margin-bottom:10px;line-height:120%"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798134198/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;Effective Objective-C 2.0&lt;/a&gt;&lt;div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%"&gt;posted with &lt;a href="http://www.amazlet.com/" title="amazlet" target="_blank"&gt;amazlet&lt;/a&gt; at 14.04.10&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-detail"&gt;Matt Galloway &lt;br /&gt;翔泳社 &lt;br /&gt;売り上げランキング: 15,587&lt;br /&gt;&lt;/div&gt;&lt;div class="amazlet-sub-info" style="float: left;"&gt;&lt;div class="amazlet-link" style="margin-top: 5px"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798134198/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-footer" style="clear: left"&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;手を出すのが早過ぎるかもしれませんが、こちらも少しずつ読んでいこうと思います。他言語版を見ても、Effectiveシリーズは実務の上で必須となるようなテクニックを扱っている良書という認識です。&lt;/p&gt;

&lt;p&gt;事前に手を出しておくことで、知っていることで避けられた実装上の問題について後悔するリスクを減らしたいですね。&lt;/p&gt;

&lt;p&gt;人気(あるいは売れなさすぎ？)のせいか発送が1日遅れで、まだ手元に届いていません。&lt;/p&gt;

&lt;h2 id="section-1"&gt;さらなる高み&lt;/h2&gt;

&lt;div class="amazlet-box" style="margin-bottom:0px;"&gt;&lt;div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798039799/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/41l4NOjbb8L._SL160_.jpg" alt="iOS Core Data徹底入門" style="border: none;" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"&gt;&lt;div class="amazlet-name" style="margin-bottom:10px;line-height:120%"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798039799/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;iOS Core Data徹底入門&lt;/a&gt;&lt;div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%"&gt;posted with &lt;a href="http://www.amazlet.com/" title="amazlet" target="_blank"&gt;amazlet&lt;/a&gt; at 14.04.10&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-detail"&gt;國居 貴浩 &lt;br /&gt;秀和システム &lt;br /&gt;売り上げランキング: 19,650&lt;br /&gt;&lt;/div&gt;&lt;div class="amazlet-sub-info" style="float: left;"&gt;&lt;div class="amazlet-link" style="margin-top: 5px"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798039799/unplu-22/ref=nosim/" name="amazletlink" target="_blank"&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="amazlet-footer" style="clear: left"&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;iOSの永続層に関する1冊。正直まだ不要なのではないかと思うのですが、作りたいアプリや自分の普段の興味分野から考えると、いずれ必要になる本であることは間違いないです。&lt;/p&gt;

&lt;p&gt;Amazonレビューを読んだ感じではちょっと敷居の高そうな本ですが、ぱらぱらとめくった感じではわかりやすそうな印象を受けました。一応初級者向けの本であるということです。&lt;/p&gt;

&lt;h2 id="section-2"&gt;まとめ&lt;/h2&gt;

&lt;p&gt;一番最初に紹介した『&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798040894/unplu-22/ref=nosim/"&gt;テスト自動化入門&lt;/a&gt;』は出たばかりということもありまだレビューも少ないですが、割りと推しの1冊でした。
これと『&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4800710227/unplu-22/ref=nosim/"&gt;iPhoneアプリ開発入門ノート&lt;/a&gt;』があれば、とりあえず簡単なアプリケーションは開発できるようになるのではないかなと思います。&lt;/p&gt;

&lt;p&gt;自分も試行錯誤しながら開発手法を検討していきたいなと思いました。&lt;/p&gt;
</content>
  </entry>
</feed>
