<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Room 3100</title>
  <subtitle>Nothing to see here, citizen.</subtitle>
  <id>http://3100.github.io/blog</id>
  <link href="http://3100.github.io/blog"/>
  <link href="http://3100.github.io/blog/feed.xml" rel="self"/>
  <updated>2014-11-03T03:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>SwiftをVimから叩きたい</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/11/03/swift-with-vim.html"/>
    <id>http://3100.github.io/blog/2014/11/03/swift-with-vim.html</id>
    <published>2014-11-03T03:00:00Z</published>
    <updated>2014-11-03T05:58:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2 id="section"&gt;概要&lt;/h2&gt;

&lt;p&gt;最近仕事は&lt;code&gt;R&lt;/code&gt;だし興味あるのは1.4β版で盛り上がってる&lt;code&gt;Go&lt;/code&gt;だし、
覚える言語多すぎると挫折しそうなので、
今までこじらせて&lt;code&gt;RubyMotion&lt;/code&gt;に逃げたりしたけど、
下の記事を読んで色々考えて、逆に&lt;code&gt;Swift&lt;/code&gt;をやろうと思った。&lt;/p&gt;

&lt;p&gt;cf. &lt;a href="http://blog.thefrontiergroup.com.au/2014/09/should-my-company-choose-rubymotion-or-swift/"&gt;Should my company choose RubyMotion or Swift? - The Frontier Group Journal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まずは&lt;code&gt;Vim&lt;/code&gt;から実行できるようにしました。
&lt;code&gt;vim-quickrun&lt;/code&gt;を&lt;code&gt;Neobundle&lt;/code&gt;あたりで導入済みというのが前提です。&lt;/p&gt;

&lt;h2 id="section-1"&gt;準備&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Xcode6&lt;/code&gt;はいずれにしても必要と思われるので、
事前に&lt;a href="https://itunes.apple.com/us/app/xcode/id497799835?ls=1&amp;amp;amp;mt=12"&gt;AppStore&lt;/a&gt;からインストールしておきます。&lt;/p&gt;

&lt;p&gt;手元環境ではなぜかインストールしたのに&lt;code&gt;Xcode5&lt;/code&gt;になってるという悲しい事態もありましたが
削除後再インストールで無事6が入りました。&lt;/p&gt;

&lt;h2 id="swift"&gt;Swiftをコマンドラインから叩けるようにする&lt;/h2&gt;

&lt;p&gt;Webを見るとまだベータ版の頃の方法が多く見つかりますが、
現時点では以下のようにするとよいでしょう。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;# xcode-select -switch /Applications/Xcode.app/Contents/Developer
&lt;/pre&gt;

&lt;p&gt;とした後、&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ xrun swift
&lt;/pre&gt;

&lt;p&gt;でREPL環境に入れるようになります。引数にswiftファイルを渡せば、結果を返します。&lt;/p&gt;

&lt;p&gt;cf. &lt;a href="http://stackoverflow.com/questions/24011120/how-can-i-use-swift-in-terminal"&gt;xcode - How can I use swift in Terminal? - Stack Overflow&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="vim"&gt;Vimの設定&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Swift用シンタックスハイライトとインデント&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/thinca/vim-quickrun"&gt;vim-quickrun&lt;/a&gt;で動かせるようにする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$HOME/.vimrc&lt;/code&gt;に以下を追加します。&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;span class="k"&gt;if &lt;/span&gt;has&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mac"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   NeoBundle &lt;span class="s1"&gt;'toyamarinyon/vim-swift'&lt;/span&gt;

   &lt;span class="nb"&gt;let &lt;/span&gt;g:quickrun_config[&lt;span class="s1"&gt;'swift'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="se"&gt;\ &lt;/span&gt;&lt;span class="s1"&gt;'command'&lt;/span&gt;: &lt;span class="s1"&gt;'xcrun'&lt;/span&gt;,
   &lt;span class="se"&gt;\ &lt;/span&gt;&lt;span class="s1"&gt;'cmdopt'&lt;/span&gt;: &lt;span class="s1"&gt;'swift'&lt;/span&gt;,
   &lt;span class="se"&gt;\ &lt;/span&gt;&lt;span class="s1"&gt;'exec'&lt;/span&gt;: &lt;span class="s1"&gt;'%c %o %s'&lt;/span&gt;,
   &lt;span class="se"&gt;\}&lt;/span&gt;
 endif
&lt;/pre&gt;

&lt;h2 id="section-2"&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://oooooooo.hatenablog.com/entry/2014/10/04/23532"&gt;Swift をコマンドラインから使う - oooooooo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;後から見つけたのだけど、&lt;code&gt;Quick&lt;/code&gt;など周辺ツールについても書かれていてオススメです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>martiniとgin</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/07/03/martini-and-gin.html"/>
    <id>http://3100.github.io/blog/2014/07/03/martini-and-gin.html</id>
    <published>2014-07-03T13:00:00Z</published>
    <updated>2014-11-03T05:58:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2 id="section"&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/go-martini/martini"&gt;martini&lt;/a&gt;という&lt;code&gt;Go&lt;/code&gt;向けのWebアプリケーションフレームワーク(WAF)があります。
最近リリースされて、すぐに&lt;code&gt;Go&lt;/code&gt;コミュニティ界隈で話題になりましたね。&lt;/p&gt;

&lt;p&gt;また、&lt;a href="https://github.com/gin-gonic/gin"&gt;gin&lt;/a&gt;という別のWAFも出て、
こちらは&lt;code&gt;martini&lt;/code&gt;より40倍以上も速いぜと主張しています。&lt;/p&gt;

&lt;p&gt;どちらか迷った挙句、速さは正義ということで、&lt;code&gt;gin&lt;/code&gt;を触ってみたのですが
結局&lt;code&gt;martini&lt;/code&gt;を使うことにしました。&lt;/p&gt;

&lt;h2 id="martini"&gt;martiniについて&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;martini&lt;/code&gt;は機能拡張を容易にするため、DIを利用しています。
この実装として、リフレクションを利用しています。&lt;/p&gt;

&lt;p&gt;一方、&lt;code&gt;Go&lt;/code&gt;の&lt;code&gt;net/http&lt;/code&gt;パッケージはそうした実装にはなっていません。
リフレクションを利用することはパフォーマンス的にも2桁近く遅くなることがある他、
ランタイムエラーの原因にもなるなどから、一部で批判を受けました。
(そもそもDIは&lt;code&gt;Java&lt;/code&gt;での古き悪しきイメージが強いのかもしれません。)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stephensearles.com/?p=254"&gt;Three reasons you should not use Martini - Stephen Searles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;開発者の&lt;a href="https://twitter.com/codegangsta"&gt;@codegangsta&lt;/a&gt;ことJeremy Saenzはこうした批判に対して記事を書いていて、
&lt;code&gt;martini&lt;/code&gt;のDI実装が完璧ではないことを率直に認め、
&lt;a href="https://github.com/codegangsta/negroni"&gt;negroni&lt;/a&gt;という別のアプローチも試みるよと書いています。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://codegangsta.io/blog/2014/05/19/my-thoughts-on-martini/"&gt;My Thoughts on Martini - Code Gangsta&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;既に&lt;code&gt;martini&lt;/code&gt;を使っている人向けには、ぜひ今後とも使い続けて欲しい、とコメントしています。&lt;/p&gt;

&lt;h2 id="gin"&gt;ginについて&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;martini&lt;/code&gt;が批判を受け、かつそれより高速で同じように記述できる&lt;code&gt;gin&lt;/code&gt;が出てきた今
&lt;code&gt;martini&lt;/code&gt;は無用の長物なのでしょうか。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://news.ycombinator.com/item?id=7966700"&gt;Show HN: Gin – Golang Martini-like web framework - Hacker News&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gin&lt;/code&gt;が登場すると、すぐにHacker News上などで反応がありましたが、
実装はかなり薄くなっているため、その部分をどう捉えるかという選択の問題になりそうだなという感想を抱きました。
(ささっと簡単なWebAPIを用意するくらいだったら、高速な&lt;code&gt;gin&lt;/code&gt;のが良いかもしれません。)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Go&lt;/code&gt;黎明期から積極的にブログなどで情報公開している@mattnさんも、以下のようにツイートしています。&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p&gt;gin が martini の40倍速いって話、コードを軽く読んだ感じだと gin は martini の rack like middleware 層を排除している反面、機能を最少しか持ってない。足りない感じもしなくないので同じ土俵で40倍速いってのはフェアじゃない気もする。&lt;/p&gt;&amp;mdash; mattn (@mattn_jp) &lt;a href="https://twitter.com/mattn_jp/statuses/483778677197373441"&gt;2014, 7月 1&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;また、個人的に使ってみた感想としては、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;まだ連携ライブラリが少ない(逆に言えば貢献のチャンス？)&lt;/li&gt;
  &lt;li&gt;まだまだ実装が変わりそう&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;な印象を受けました。&lt;/p&gt;

&lt;p&gt;例えば、&lt;code&gt;redis&lt;/code&gt;と連携しようとして、&lt;a href="https://github.com/garyburd/redigo"&gt;redigo&lt;/a&gt;なんかを使おうとした場合、
&lt;code&gt;martini&lt;/code&gt;ではMap機能があるので簡単に取り込んで利用できますが
&lt;code&gt;gin&lt;/code&gt;ではそういった機能は用意されていません。(あくまで現時点では。)&lt;/p&gt;

&lt;p&gt;もっとも、連携機能については、PRもあがっていて、それほど時間はかからずに、改善されるのではないかと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/gin-gonic/gin/pull/16"&gt;Wrap http.ResponseWriter to greatly increase middleware/logging accesibilty by zmarcantel · Pull Request #16 · gin-gonic/gin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;あまり重要なポイントではないかもしれませんが、
ルーティング用メソッドが&lt;code&gt;Get&lt;/code&gt;や&lt;code&gt;Post&lt;/code&gt;じゃなくて、&lt;code&gt;GET&lt;/code&gt;や&lt;code&gt;POST&lt;/code&gt;だというのも、気持ち悪いかもしれません。。&lt;/p&gt;

&lt;h2 id="section-1"&gt;まとめ&lt;/h2&gt;

&lt;p&gt;将来的に&lt;code&gt;gin&lt;/code&gt;がどうなっていくのかは楽しみですが、現時点では&lt;code&gt;martini&lt;/code&gt;を使うのが、開発時には楽である気がします。&lt;/p&gt;

&lt;p&gt;さらに、身も蓋もないことを書きますと、自分自身がそこまで高速であることが求められるようなプロジェクトに携われていません。&lt;/p&gt;

&lt;p&gt;とはいえ、たとえば&lt;code&gt;redis&lt;/code&gt;が数万クエリ/秒を捌けるのに比べて&lt;code&gt;gin&lt;/code&gt;は約1500リクエスト/秒、&lt;code&gt;martini&lt;/code&gt;は約300リクエスト/秒(&lt;code&gt;rails&lt;/code&gt;とか&lt;code&gt;node.js&lt;/code&gt;級？)ですから、
WAFが高速化すると嬉しい部分はまだまだありそうです。&lt;/p&gt;

&lt;p&gt;今後&lt;code&gt;gin&lt;/code&gt;が高機能になった時点で、再度検討したいなと思います。&lt;/p&gt;

&lt;h2 id="section-2"&gt;おまけ&lt;/h2&gt;

&lt;p&gt;日本でも最近は&lt;code&gt;rebuild.fm&lt;/code&gt;に代表されるような開発者向けpodcastが増えてきましたが、
割りと古くからある&lt;code&gt;The Changelog&lt;/code&gt;でも少し前に&lt;code&gt;martini&lt;/code&gt;を取り上げ、
@codegangstaがゲストとして、なぜこういった実装になったか、その思想を語っています。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://thechangelog.com/117/"&gt;#117: Go, Martini and Gophercasts with Jeremy Saenz - The Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;あとは、どうしてそんなHNになったのかとか、どうでもいい話題もあって楽しめます。&lt;/p&gt;

&lt;p&gt;そんなに話す速度も速くないし、割りと日本の英語教育でも学ぶような言い回しが多いので、
&lt;code&gt;martini&lt;/code&gt;が気になっている方は聴いてみると良いかもしれません。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>linq.jsを触ってみた</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/06/30/introduction-of-linq-js.html"/>
    <id>http://3100.github.io/blog/2014/06/30/introduction-of-linq-js.html</id>
    <published>2014-06-30T12:36:00Z</published>
    <updated>2014-11-03T05:58:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2 id="section"&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://linqjs.codeplex.com/"&gt;linq.js&lt;/a&gt;という、データを汎用的に処理するクエリ機能を試してみました。&lt;/p&gt;

&lt;h2 id="section-1"&gt;前置き&lt;/h2&gt;

&lt;p&gt;先日から&lt;code&gt;vue.js&lt;/code&gt;という&lt;code&gt;MVVM&lt;/code&gt;ライクな実装を可能にするライブラリを触っています。
&lt;code&gt;MVVM&lt;/code&gt;といえば&lt;code&gt;Silverlight&lt;/code&gt;や&lt;code&gt;WPF&lt;/code&gt;。
元々Microsoftが流行らせようとしたパターンです。&lt;/p&gt;

&lt;p&gt;そのMicrosoftが開発したもう1つの便利ツールがあります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LINQ&lt;/code&gt;です。
あまりご存知でない方のために簡単に説明しますと、データの形態を気にせずに、汎用的に使えることを目指した強力なクエリ機能です。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://msdn.microsoft.com/ja-jp/library/bb397926.aspx"&gt;統合言語クエリ (LINQ: Language-Integrated Query)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この&lt;code&gt;LINQ&lt;/code&gt;、&lt;code&gt;C#&lt;/code&gt;や&lt;code&gt;VisualBasic&lt;/code&gt;向けなんですが、
有志が雰囲気そのままに&lt;code&gt;JavaScript&lt;/code&gt;へ移植していることは以前から知っていました。&lt;/p&gt;

&lt;p&gt;今回&lt;code&gt;MVVM&lt;/code&gt;もやるんだし、ちょうど良い機会だろうということで実際に触ってみることにしました。&lt;/p&gt;

&lt;h2 id="section-2"&gt;導入方法&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;//cdnjs.cloudflare.com/ajax/libs/linq.js/2.2.0.2/jquery.linq.min.js&lt;/li&gt;
  &lt;li&gt;//cdnjs.cloudflare.com/ajax/libs/linq.js/2.2.0.2/linq.min.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記2ライブラリを組み込むのがとりあえず触るには簡単かと思います。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id="section-3"&gt;使い方&lt;/h2&gt;

&lt;h3 id="json"&gt;JSON&lt;/h3&gt;

&lt;pre class="highlight coffeescript"&gt;&lt;span class="nx"&gt;demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;isSameMonth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;checkedMenu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Enumerable.From()&lt;/code&gt;で&lt;code&gt;json&lt;/code&gt;形式のオブジェクトを取り込むことが出来ます。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Where()&lt;/code&gt;は条件節。該当するデータのみ次へ送ります。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Select()&lt;/code&gt;は出力対象を指定します。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ToArray()&lt;/code&gt;で実際に処理が実行されます。&lt;code&gt;LINQ&lt;/code&gt;は遅延処理&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="dom"&gt;DOM&lt;/h3&gt;

&lt;pre class="highlight coffeescript"&gt;&lt;span class="nx"&gt;checked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"input[id^=check]"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toEnumerable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"$.attr('checked') == 'checked'"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;toEnumerable()&lt;/code&gt;で&lt;code&gt;jQuery&lt;/code&gt;のセレクタを取り込めます。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Where()&lt;/code&gt;の中のような表現で書くことも出来ます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="section-4"&gt;注意点: クエリは遅延実行&lt;/h3&gt;

&lt;p&gt;上にもさらっと書きましたが、&lt;code&gt;LINQ&lt;/code&gt;は実行されるまではただのクエリです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ToArray()&lt;/code&gt;などで呼び出すことで、実際に処理が行われます。&lt;/p&gt;

&lt;pre class="highlight coffeescript"&gt;&lt;span class="c1"&gt;# ただのクエリ。処理はまだ行われない
&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;price&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# ここで初めて処理が実行される
&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# やはり、まだ処理は行われない
&lt;/span&gt;&lt;span class="nx"&gt;query2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;OrderBy&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;query2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;price&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
         &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# ここで処理が行われる
&lt;/span&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id="section-5"&gt;クエリの種類&lt;/h2&gt;

&lt;p&gt;その数なんと90種類！
&lt;code&gt;LINQ&lt;/code&gt;にあるものは大抵用意されているようです。独自のものもあります。&lt;/p&gt;

&lt;p&gt;少しだけ紹介します。&lt;/p&gt;

&lt;h3 id="groupby"&gt;GroupBy&lt;/h3&gt;

&lt;pre class="highlight coffeescript"&gt;&lt;span class="nx"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GroupBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"$.menu"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"{ y: $$.Count(), name: $}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;GroupBy()&lt;/code&gt;は集計用によく用いられる関数です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第1引数はキー&lt;/li&gt;
  &lt;li&gt;第2引数は中間データを加工する際に使用？&lt;/li&gt;
  &lt;li&gt;第3引数で出力データを指定。&lt;code&gt;$$&lt;/code&gt;は集計関数用&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="join"&gt;Join&lt;/h3&gt;

&lt;pre class="highlight coffeescript"&gt;&lt;span class="nx"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"$.id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"$.id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"{idA: $.id, valA: $.val, valB: $$.val}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;2つのデータを紐付けする関数です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第1引数に別データ&lt;/li&gt;
  &lt;li&gt;第2引数と第3引数にキー&lt;/li&gt;
  &lt;li&gt;第4引数に出力形式。&lt;code&gt;$$&lt;/code&gt;は2番めのデータ。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="orderby"&gt;OrderBy&lt;/h3&gt;

&lt;pre class="highlight coffeescript"&gt;&lt;span class="nx"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;OrderByDescending&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"$.y"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;これはわかりますよね。順序付けを行う関数です。&lt;code&gt;OrderByDescending()&lt;/code&gt;は降順。&lt;/p&gt;

&lt;h3 id="take"&gt;Take&lt;/h3&gt;

&lt;pre class="highlight coffeescript"&gt;&lt;span class="nx"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;先頭から指定件数だけ取得する関数です。&lt;/p&gt;

&lt;h3 id="section-6"&gt;その他&lt;/h3&gt;

&lt;p&gt;公式サイトにもサンプルがあるので、そちらもどうぞ。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://linqjs.codeplex.com/wikipage?title=linq.js%20Samples"&gt;http://linqjs.codeplex.com/wikipage?title=linq.js%20Samples&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="section-7"&gt;感想&lt;/h2&gt;

&lt;p&gt;さらっと上辺をなぞっただけですが、いかがでしたでしょうか。
&lt;code&gt;JavaScript&lt;/code&gt;上でのデータ操作や集計が、とても簡単になりそうな印象を受けました。
&lt;code&gt;LINQ&lt;/code&gt;自体に慣れ親しんでいる方からすると、
割りと直感的に使えるのではないかと思います。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;linq.js&lt;/code&gt;、なかなかオススメです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>vue.jsとDate</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/06/30/vue-js-with-date.html"/>
    <id>http://3100.github.io/blog/2014/06/30/vue-js-with-date.html</id>
    <published>2014-06-29T16:50:00Z</published>
    <updated>2014-11-03T05:58:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;最近&lt;a href="http://vuejs.org/"&gt;vue.js&lt;/a&gt;が良いと聞いたので、サンプルサイトを作って遊んでいます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vue.js&lt;/code&gt;は所謂ViewModel的なオブジェクトを生成してあげるのですが
そこで管理するデータは&lt;code&gt;json&lt;/code&gt;で表現できるものでなければなりません。&lt;/p&gt;

&lt;p&gt;それで困ったのがjavascriptの&lt;code&gt;Date&lt;/code&gt;。
そのままDateオブジェクトを管理しようとすると、うまくいきませんでした。&lt;/p&gt;

&lt;p&gt;そこで、以下のように一旦ミリ秒(int)として管理して
必要な値を&lt;code&gt;computed&lt;/code&gt;(必要なときに計算する)として持つようにしました。&lt;/p&gt;

&lt;pre class="highlight coffeescript"&gt;&lt;span class="nx"&gt;sample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;
  &lt;span class="na"&gt;el&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'#sample'&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# うまくいかない
&lt;/span&gt;    &lt;span class="c1"&gt;#date: new Date()
&lt;/span&gt;    &lt;span class="c1"&gt;# 代わりにミリ秒で管理
&lt;/span&gt;    &lt;span class="na"&gt;dateMs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="na"&gt;computed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;dateMs&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="na"&gt;month&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;dateMs&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="na"&gt;ym&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="c1"&gt;# これはうまくいかない
&lt;/span&gt;      &lt;span class="c1"&gt;# "#{@year}年#{@month}月"
&lt;/span&gt;      &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;dateMs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
        &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'0'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;年&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;月"&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;nextMonth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;dateMs&lt;/span&gt;
      &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setMonth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;dateMs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="na"&gt;prevMonth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;dateMs&lt;/span&gt;
      &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setMonth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;dateMs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;すごい間抜け感があります。。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://momentjs.com/"&gt;Moment.js&lt;/a&gt;とか使えばもう少し綺麗になるかもしれないけど
これだけのことに10kb近いライブラリを使いするのもどうかな。。&lt;/p&gt;

&lt;p&gt;今回の例に関して言えば、使っているのは年と月だけなので、以下のほうが良かったかもですね。(拡張には弱そう)&lt;/p&gt;

&lt;pre class="highlight coffeescript"&gt;&lt;span class="nx"&gt;sample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;
  &lt;span class="na"&gt;el&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'#sample'&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="na"&gt;month&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="na"&gt;computed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;ym&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;年&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;month&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;月"&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;nextMonth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;month&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
        &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;year&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;month&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="na"&gt;prevMonth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;month&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;year&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;month&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;なんかもっとスマートな方法はないものか。。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>npm:globalとlocal</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/06/28/npm-global-vs-local.html"/>
    <id>http://3100.github.io/blog/2014/06/28/npm-global-vs-local.html</id>
    <published>2014-06-28T02:07:00Z</published>
    <updated>2014-11-03T05:58:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2 id="section"&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;node.js&lt;/code&gt;のパッケージ管理ツールである&lt;code&gt;npm&lt;/code&gt;。
&lt;code&gt;package.json&lt;/code&gt;などと併用すると非常に便利ですが
&lt;code&gt;-g&lt;/code&gt;オプションの使い分けが気になりました。&lt;/p&gt;

&lt;h2 id="section-1"&gt;資料&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;node.js&lt;/code&gt;の公式サイトに、&lt;code&gt;npm 1.0&lt;/code&gt;が登場した時の記事があります。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation"&gt;npm 1.0: Global vs Local installation&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="section-2"&gt;基本機能&lt;/h2&gt;

&lt;p&gt;知っている人には今更かもしれませんが、おさらいです。&lt;/p&gt;

&lt;h3 id="global"&gt;global&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;パッケージは&lt;code&gt;{prefix}/lib/node_modules&lt;/code&gt;に置かれる&lt;/li&gt;
  &lt;li&gt;実行ファイルは&lt;code&gt;{prefix}/bin&lt;/code&gt;に配置される&lt;/li&gt;
  &lt;li&gt;manページがある場合は&lt;code&gt;{prefix}/share/man&lt;/code&gt;に置かれる&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;{prefix}&lt;/code&gt;は&lt;code&gt;/usr/local&lt;/code&gt;など。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="local"&gt;local&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;パッケージは現在のディレクトリ下、&lt;code&gt;./node_modules&lt;/code&gt;に置かれる&lt;/li&gt;
  &lt;li&gt;実行ファイルは&lt;code&gt;./node_modules/bin&lt;/code&gt;に配置される&lt;/li&gt;
  &lt;li&gt;manページはインストールされない&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="section-3"&gt;使い分け&lt;/h2&gt;

&lt;p&gt;基本的には以下の方針に従えば良さそうです。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;今のプロジェクトで使いたいだけなら&lt;code&gt;require('whatever')&lt;/code&gt;して、localにインストールする。&lt;/li&gt;
  &lt;li&gt;シェルやコマンドプロンプトなどから使いたい場合は&lt;code&gt;-g&lt;/code&gt;オプションをつけてglobalにインストールする。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="coffeescriptexpress"&gt;CoffeescriptやExpressなど&lt;/h2&gt;

&lt;p&gt;こうしたパッケージはライブラリでもありますが、コマンドラインインターフェースも備えています。
こうした場合、2つの方法があるそうです。(前者がオススメされています。)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;globalとlocal両方にインストールする。実質これで動くし、ディスクスペースを多少浪費するくらい。&lt;/li&gt;
  &lt;li&gt;globalにインストールしたあとで&lt;code&gt;npm link express&lt;/code&gt;などとする。これでglobal側だけ更新していくようにすれば他のシンボリックリンクにも反映される。(Windowsではcygwinなどを使わない限り、この方法は取れない)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="section-4"&gt;その他&lt;/h2&gt;

&lt;p&gt;上記記事では子フォルダでさらに&lt;code&gt;npm install&lt;/code&gt;する例も紹介されていますが、管理上面倒なことになりますし、あまり気にする必要はないでしょう。&lt;/p&gt;

&lt;p&gt;また、localにインストールしてもPATHを通せばコマンドラインインターフェースも使用できるので、globalインストールを全く使わないという選択肢もありです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Slackを使ってみた感想</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/06/27/first-impression-of-slack.html"/>
    <id>http://3100.github.io/blog/2014/06/27/first-impression-of-slack.html</id>
    <published>2014-06-27T13:00:00Z</published>
    <updated>2014-11-03T05:58:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2 id="section"&gt;経緯&lt;/h2&gt;

&lt;p&gt;いまだに&lt;code&gt;IP Messenger&lt;/code&gt;が幅をきかす社内ですが、技術的興味が似ている若手社員の間では色々チャットサービスを試しています。&lt;/p&gt;

&lt;p&gt;過去の変遷は&lt;a href="http://lingr.com/"&gt;lingr&lt;/a&gt; → &lt;a href="http://www.codefirst.org/AsakusaSatellite/"&gt;AsakusaSatellite&lt;/a&gt; → &lt;a href="http://kato.im/"&gt;kato.im&lt;/a&gt;で、ここ数ヶ月ほどは&lt;code&gt;kato.im&lt;/code&gt;がお気に入りでした。
検討したサービスには&lt;a href="https://www.hipchat.com/"&gt;hipchat&lt;/a&gt;や&lt;a href="http://www.chatwork.com/ja/"&gt;chatwork&lt;/a&gt;などもありましたが、見た目が&lt;code&gt;kato.im&lt;/code&gt;ほどではないことなどから、食指が動きません。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;kato.im&lt;/code&gt;の欠点は&lt;code&gt;hipchat&lt;/code&gt;が人数無制限無料となった今も10人を超えると課金対象になることです。($5ppmなので課金開始額は$50pm。)
&lt;code&gt;AsakusaSatellite&lt;/code&gt;から導入していた&lt;a href="https://hubot.github.com/"&gt;hubot&lt;/a&gt;も立派に1人としてカウントされるため、実質9人までしか同じログを共有することができません。
利用者が10人を超えていたので、結果としてログイン頻度や発言数などによって人が2つのグループを行き来するという運用になっていました。&lt;/p&gt;

&lt;p&gt;一方、最近巷で話題の&lt;a href="https://slack.com/"&gt;slack&lt;/a&gt;は&lt;code&gt;hipchat&lt;/code&gt;を意識してなのかそうでないのか、人数無制限無料です。また、ビジュアル的にもいい感じであることが事前に確認されていました。
そこで、今回試験的に導入してみることにしました。&lt;/p&gt;

&lt;h2 id="section-1"&gt;個人的に重視する部分&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;使いやすいチャット機能&lt;/li&gt;
  &lt;li&gt;Wikiを置き換えたい&lt;/li&gt;
  &lt;li&gt;見た目&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;7年近く運用している&lt;code&gt;moinmoin&lt;/code&gt;をそろそろ違うWikiに置き換えたい機運が高まっています。
似たような用途で、&lt;a href="https://github.com/volpe28v/DevHub"&gt;devhub&lt;/a&gt;を運用しているチームもいますが、できれば長期にわたる使用に耐えられるようなものが望ましいです。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id="section-2"&gt;いいところ&lt;/h2&gt;

&lt;h3 id="ui"&gt;UIが変態的だけどなかなか爽快&lt;/h3&gt;

&lt;p&gt;初めてログインすると、画面のあちこちに円形のマーキングがされたりして、今っぽさを感じます。
決して使いやすい素直なUIではありませんが、デザインにこだわりを感じます。&lt;/p&gt;

&lt;h3 id="section-3"&gt;スニペット機能や記事投稿機能が便利&lt;/h3&gt;

&lt;p&gt;コードスニペットや記事投稿機能のあるチャットシステムというのが意外性あります。&lt;code&gt;Devhub&lt;/code&gt;で経験している機能ですが、より洗練された印象を受けます。&lt;/p&gt;

&lt;h3 id="section-4"&gt;過去に遡って発言を訂正できる&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;kato.im&lt;/code&gt;では直前の発言のみ1分間だけ修正可能という仕様でした。
このルール内でネタ発言を歴史に刻むかどうかの壮大なチキンレースが繰り広げられたりすることもありましたが、やはり不便です。&lt;/p&gt;

&lt;p&gt;いつでも発言を訂正できるというのは、言質を重視する開発現場では欠点かもしれませんが、やはり必要な機能だと思います。&lt;/p&gt;

&lt;h3 id="hubot"&gt;hubot対応&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;hubot&lt;/code&gt;に何をさせているかといえば、本当に大したことはさせていませんが、僕達には必要不可欠なおもちゃです。&lt;/p&gt;

&lt;p&gt;&lt;img alt="slack" src="/blog/2014/06/27/first-impression-of-slack/slack.png" /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id="section-5"&gt;悪いところ&lt;/h2&gt;

&lt;h3 id="section-6"&gt;利用料金は高め&lt;/h3&gt;

&lt;p&gt;基本無料ではありますが、課金段階においてはユーザ単価が高め($8ppm〜)なのが気になります。&lt;/p&gt;

&lt;p&gt;また、他のサービスとの連携も無料版は5種類に制限されているので、やや不便です。&lt;/p&gt;

&lt;h3 id="ui-1"&gt;UIに慣れるまで目的のことをするのが難しい&lt;/h3&gt;

&lt;p&gt;驚き最小の原則には反している気がします。例えば、ユーザやチャンネルの右側にある☓ボタンは、自分から見えなくするだけです。削除ボタンかな？という印象を受けます。
チームのホーム画面とチャット画面の行き来も最初はとまどいます。&lt;/p&gt;

&lt;h3 id="gfmgithub-flavored-markdown"&gt;GFM(Github Flavored Markdown)ではない&lt;/h3&gt;

&lt;p&gt;なぜだ。&lt;/p&gt;

&lt;h3 id="section-7"&gt;スニペットや記事にタグ付けできない&lt;/h3&gt;

&lt;p&gt;あくまでチャットの補助機能という位置づけなのでしょうか。
個人的にはここが拡充されれば色々なサービスを喰う存在になると予想します。&lt;/p&gt;

&lt;h3 id="section-8"&gt;1画面に複数チャンネルを表示できない&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;hootsuite&lt;/code&gt;や&lt;code&gt;kato.im&lt;/code&gt;に慣れている人間にはやや不便です。&lt;/p&gt;

&lt;h3 id="huboturlheroku"&gt;hubotにURLが必要なのでherokuなどを使うことになる&lt;/h3&gt;

&lt;p&gt;使用上の制限なんでしょうか。従来は&lt;code&gt;digitalocean&lt;/code&gt;上で動かしていましたが、仕方なく&lt;code&gt;heroku&lt;/code&gt;へ移行させました。&lt;/p&gt;

&lt;p&gt;話がずれますが、&lt;a href="http://wercker.com/"&gt;wercker&lt;/a&gt;は便利ですね。githubへのプッシュからの自動デプロイが簡単です。&lt;code&gt;travis-ci&lt;/code&gt;の時はもうちょっと面倒だった記憶があります。&lt;/p&gt;

&lt;h2 id="section-9"&gt;まとめ&lt;/h2&gt;

&lt;p&gt;残念だったのは記事機能です。現時点ではタグやカテゴリといった機能は存在せず、キーワード検索か最新記事一覧から閲覧せざるを得ません。慣れの問題かもしれませんが、検索性や俯瞰性に難ありでしょう。&lt;/p&gt;

&lt;p&gt;結論としては、&lt;code&gt;kato.im&lt;/code&gt;から移行して引き続き利用していくことになったものの、Wikiを完全に代替できるわけではなく、機能改良が望まれるかあるいは諦めるかという感じになりました。&lt;/p&gt;

&lt;p&gt;尚、運用中のhubotは以下に公開されています。少しだけ独自スクリプトもあります。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/3100/slack-hubot"&gt;3100/slack-hubot&lt;/a&gt;&lt;/p&gt;

</content>
  </entry>
</feed>
