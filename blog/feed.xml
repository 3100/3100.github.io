<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Room 3100</title>
  <subtitle>Nothing to see here, citizen.</subtitle>
  <id>http://3100.github.io/blog</id>
  <link href="http://3100.github.io/blog"/>
  <link href="http://3100.github.io/blog/feed.xml" rel="self"/>
  <updated>2013-11-15T15:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>MoinMoin WikiをNginxで動かす</title>
    <link rel="alternate" href="http://3100.github.io/blog/2013/11/16/moin-with-nginx.html"/>
    <id>http://3100.github.io/blog/2013/11/16/moin-with-nginx.html</id>
    <published>2013-11-15T15:00:00Z</published>
    <updated>2013-11-16T01:15:35+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;さくらVPSで動かしていた&lt;a href="http://moinmo.in/"&gt;MoinMoin Wiki&lt;/a&gt;を&lt;a href="https://www.digitalocean.com/"&gt;DigitalOcean&lt;/a&gt;に移行することにしました。
これを機に、WebサーバもApacheからNginxに移行しました。&lt;/p&gt;

&lt;p&gt;DigitalOceanのdroplet(仮想インスタンス)はArch Linux 64bit版です。とりあえず使うだけなら、512MBで問題ないでしょう。&lt;/p&gt;

&lt;h2 id="moinmoin"&gt;MoinMoinのインストール&lt;/h2&gt;

&lt;p&gt;まずMoinMoinをインストールします。公式サイトからソースを落としてきてもいいですが、
今回は以下のパッケージを利用しました。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.archlinux.org/packages/community/any/moinmoin/"&gt;Arch Linux - moinmoin 1.9.7-1 (any)&lt;/a&gt;&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ sudo pacman -S moin
&lt;/pre&gt;
&lt;p&gt;デフォルトのインストール先は/usr/share/moinになります。&lt;/p&gt;

&lt;h2 id="nginx"&gt;Nginxのインストール&lt;/h2&gt;

&lt;p&gt;同様にNginxもインストールします。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ sudo pacman -S nginx
&lt;/pre&gt;
&lt;h2 id="uwsgi"&gt;uWSGIのインストール&lt;/h2&gt;

&lt;p&gt;今回、MoinMoinはWSGIを利用します。
&lt;a href="http://projects.unbit.it/uwsgi/"&gt;uWSGI&lt;/a&gt;をNginxと組み合わせることで、MoinMoinをNginx上で動かすことができるようになります。&lt;/p&gt;

&lt;p&gt;uWSGIについてもう少し知りたい方は以下のブログ記事が参考になります。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/m-hiyama/20120312/1331513519"&gt;便利で超強力なWSGIサーバー uWSGI を使ってみよう - 檜山正幸のキマイラ飼育記&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;話を戻して、uWSGIをインストールします。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ sudo pacman -S uwsgi uwsgi-plugin-python
&lt;/pre&gt;
&lt;h2 id="section"&gt;設定&lt;/h2&gt;

&lt;h3 id="uwsgi-1"&gt;uWSGI&lt;/h3&gt;

&lt;p&gt;まず、uWSGIの設定を行います。uWSGIはini、xml、json等の形式で設定ファイルを記述できますが、今回はini形式で書きました。
/etc/uwsgi/moin.iniに下記のような設定を記述しています。&lt;/p&gt;

&lt;pre class="highlight ini"&gt;&lt;span class="nn"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="py"&gt;plugins&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;python2&lt;/span&gt;
&lt;span class="err"&gt;ignore-script-name&lt;/span&gt;
&lt;span class="py"&gt;processes&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;4&lt;/span&gt;
&lt;span class="err"&gt;limit-&lt;/span&gt;&lt;span class="py"&gt;as&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;256&lt;/span&gt;
&lt;span class="err"&gt;wsgi-&lt;/span&gt;&lt;span class="py"&gt;file&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/usr/share/moin/server/moin.wsgi&lt;/span&gt;
&lt;span class="py"&gt;socket&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/tmp/moin.sock&lt;/span&gt;
&lt;span class="err"&gt;chmod-&lt;/span&gt;&lt;span class="py"&gt;socket&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;777&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;chmod-socketのパーミションを777にしているのは、実行時にパーミションエラーが発生したためです。。
もし、より良い解決法がある場合は、教えていただけると幸いです。&lt;/p&gt;

&lt;p&gt;この設定をもとにuwsgiを立ち上げます。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ sudo systemctl enable uwsgi@moin.service
$ sudo systemctl start uwsgi@moin.service
&lt;/pre&gt;
&lt;h3 id="nginx-1"&gt;Nginx&lt;/h3&gt;

&lt;p&gt;続いて、Nginxの設定です。/etc/nginx/nginx.confを編集します。&lt;/p&gt;

&lt;pre class="highlight nginx"&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;uwsgi_modifier1&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;uwsgi_pass&lt;/span&gt; &lt;span class="s"&gt;unix:/tmp/moin.sock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/moin_static197/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;/usr/share/moin/htdocs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;実際にはExpiresやCache-Control、Gzipなどの設定も必要でしょうが、とりあえず動かすだけならこれでよいと思います。&lt;/p&gt;

&lt;p&gt;以下で、サービスを開始できるようになります。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ sudo systemctl enable nginx
$ sudo systemctl start nginx
&lt;/pre&gt;
&lt;h3 id="moinmoin-1"&gt;MoinMoin&lt;/h3&gt;

&lt;p&gt;あとはMoinMoinの設定をお好みに応じて変更するだけです。&lt;/p&gt;

&lt;p&gt;/usr/share/moin/config/wikiconfig.pyを編集します。&lt;/p&gt;

&lt;p&gt;とりあえず、以下だけ修正しておけば良いのではないでしょうか。&lt;/p&gt;

&lt;pre class="highlight python"&gt;&lt;span class="n"&gt;sitename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;Your Wiki&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;log_reverse_dns_lookups&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;tz_offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;9.0&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;以下のページも読むと、どういったことを設定可能かわかりやすいでしょう。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://moinmo.in/HelpOnConfiguration"&gt;HelpOnConfiguration - MoinMoin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;wikiconfig.pyを編集した場合は、uwsgiを再起動することで、反映されます。&lt;/p&gt;

&lt;h2 id="section-1"&gt;おわり&lt;/h2&gt;

&lt;p&gt;ここまでで、無事にMoinMoinが立ち上がっていることと思います。
最初のLanguageSetupを行うために、ユーザ登録をして、
そのユーザ名をwikiconfig.pyに登録して、uwsgiを再起動することになります。&lt;/p&gt;

&lt;p&gt;LanguageSetupも完了すれば、あとはMoinMoinを好きに弄っていくだけです！&lt;/p&gt;

&lt;p&gt;尚、初期状態ではMoinの検索エンジンは遅いので、Xapianを導入するのも良いでしょう。
これについてもそのうち記事を書きたいと思います。&lt;/p&gt;

&lt;p&gt;お疲れ様でした。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>rbenvでruby2.0を入れようとするとOpensslのエラーが出る</title>
    <link rel="alternate" href="http://3100.github.io/blog/2013/11/08/openssl-error-installing-ruby-2.html"/>
    <id>http://3100.github.io/blog/2013/11/08/openssl-error-installing-ruby-2.html</id>
    <published>2013-11-07T15:00:00Z</published>
    <updated>2013-11-16T01:15:35+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Marvericksを入れた後のMacでrbenvからRuby2.0を入れようとするとエラーになってしまいました。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ gem install 2.0.0-p0
Downloading ruby-2.0.0-p0.tar.gz...
-&amp;gt; http://dqw8nmjcqpjn7.cloudfront.net/50d307c4dc9297ae59952527be4e755d
Installing ruby-2.0.0-p0...

BUILD FAILED

Inspect or clean up the working tree at /var/folders/8h/mdr7s3ns64sfnscg5c4h2w0c0000gn/T/ruby-build.20131108212415.26000
Results logged to /var/folders/8h/mdr7s3ns64sfnscg5c4h2w0c0000gn/T/ruby-build.20131108212415.26000.log

Last 10 log lines:
installing default gems:      /Users/zero/.rbenv/versions/2.0.0-p0/lib/ruby/gems/2.0.0 (build_info, cache, doc, gems, specifications)
                              bigdecimal 1.2.0
                              io-console 0.4.2
                              json 1.7.7
                              minitest 4.3.2
                              psych 2.0.0
                              rake 0.9.6
                              rdoc 4.0.0
                              test-unit 2.0.0.0
The Ruby openssl extension was not compiled. Missing the OpenSSL lib?
&lt;/pre&gt;
&lt;p&gt;調べるとドンピシャな解答がStack Overflowにありました。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ CONFIGURE_OPTS=&amp;quot;--with-openssl-dir=`brew --prefix openssl`&amp;quot; rbenv install 2.0.0-p0
&lt;/pre&gt;
&lt;p&gt;もちろん、openssl自体がインストールされていない環境ではあらかじめインストールしておく必要があります。Homebrewを利用しているなら&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ brew install openssl
&lt;/pre&gt;
&lt;p&gt;ですね。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/17181075/openssl-error-installing-ruby-2-0-0-p195-on-mac-with-rbenv"&gt;homebrew - OpenSSL error installing ruby 2.0.0-p195 on Mac with rbenv - Stack Overflow&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>middleman-blogのハイライトにMonokaiテーマを使う</title>
    <link rel="alternate" href="http://3100.github.io/blog/2013/10/31/monokai-theme-to-middleman-blog.html"/>
    <id>http://3100.github.io/blog/2013/10/31/monokai-theme-to-middleman-blog.html</id>
    <published>2013-10-30T15:00:00Z</published>
    <updated>2013-11-16T01:15:35+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;middleman-blogには、コードをシンタックスハイライトする機能があります。
middleman-syntaxをGemfileに加えて、必要な設定をconfig.rbに書くだけです。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/middleman/middleman-syntax"&gt;middleman/middleman-syntax&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;kramdownを使う場合は&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:markdown_engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:kramdown&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;redcarpetなら&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:markdown_engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:redcarpet&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:markdown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:fenced_code_blocks&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:smartypants&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ですかね。&lt;/p&gt;

&lt;p&gt;middleman-syntaxは内部でrougeというruby製pygmentsを目指しているハイライトパーサを使用しています。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jayferd/rouge"&gt;jayferd/rouge&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これを利用して、rougeに用意されているハイライトテーマを利用することができるようです。具体的には&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ThankfulEyes&lt;/li&gt;
  &lt;li&gt;Colorful&lt;/li&gt;
  &lt;li&gt;Github&lt;/li&gt;
  &lt;li&gt;Base16&lt;/li&gt;
  &lt;li&gt;Base16::Solarized (Octopress風らしいです)&lt;/li&gt;
  &lt;li&gt;Base16::Monokai&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;があります。(Base16::Monokaiは基本色を使っているせいか？地味です。。)&lt;/p&gt;

&lt;p&gt;これをmiddlemanで利用するには、stylesheets/highlight.css.erbなどというcss生成ファイルを作って以下のように書き込み&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sx"&gt;%= Rouge::Themes::Github.render(:scope =&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.highlight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="sx"&gt;%&amp;gt;
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;あとはHTML上でhighlight.cssを読み込むようにします。&lt;/p&gt;

&lt;h3 id="section"&gt;ところで(割りと無駄話)&lt;/h3&gt;

&lt;p&gt;ざっと見た感じ、あまりいい感じのハイライトが見つかりません。
そこで、pygments-cssを参考にして作ったMonokaiをrougeに加えてもらいました。
何気に内輪じゃないOSSへは初のプルリクでしたが、無事取り込まれました。&lt;/p&gt;

&lt;p&gt;まだ、gemには反映されていなので、middleman-syntaxをフォークして中のGemfileを修正する必要があります。&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rouge&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:git&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;git://github.com/jayferd/rouge.git&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;これをさらに、middlemanのGemfileで指定します。&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;middleman-syntax&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:git&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;git://github.com/&amp;lt;あなたのid&amp;gt;/middleman-syntax.git&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;あとはbundle updateすれば良いはずです。これで無事Monokaiを使えるようになりました。&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sx"&gt;%= Rouge::Themes::Monokai.render(:scope =&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.highlight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="sx"&gt;%&amp;gt;
&lt;/span&gt;&lt;/pre&gt;
&lt;h3 id="section-1"&gt;もっとシンプルな方法&lt;/h3&gt;

&lt;p&gt;実はmiddleman-syntaxはpygments用cssファイルを取り込めるらしいです。
ですので、stylesheets/highlight.css.erbを作る代わりに、
目的のテーマ用cssを直接HTMLから指定するだけで済むようです。&lt;/p&gt;

&lt;p&gt;試してはいませんが、monokai.cssというものも見つかりました。若干直せば使えそうに見えます。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/richleland/pygments-css/blob/master/monokai.css"&gt;pygments-css/monokai.css at master · richleland/pygments-css&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="section-2"&gt;というわけで&lt;/h3&gt;

&lt;p&gt;以下、Monokaiのサンプルになります。&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="c1"&gt;# The Greeter class&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Greeter&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;capitalize&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;salute&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Create a new object&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Greeter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Output &amp;quot;Hello World!&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;salute&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Happy highlighting!&lt;/p&gt;

&lt;h3 id="section-3"&gt;余談&lt;/h3&gt;

&lt;p&gt;元々SublimeText2風のテーマが欲しくてMonokaiに辿り着いたのですが、
よく見ると色パレットは似ていても配色パターンが違いますね。。
個人的にはhighlight.jsのmonokaiがST2っぽいなと思っています。
これは、ST2風も作るべきか。。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Middlemanに移行しました</title>
    <link rel="alternate" href="http://3100.github.io/blog/2013/10/29/move-to-middleman.html"/>
    <id>http://3100.github.io/blog/2013/10/29/move-to-middleman.html</id>
    <published>2013-10-28T15:00:00Z</published>
    <updated>2013-11-16T01:15:35+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Github Pagesを本格的に使おうと、Middlemanに移行しました。&lt;/p&gt;

&lt;p&gt;技術ネタを放り込んでいけるように習慣づけたい。&lt;/p&gt;

&lt;p&gt;OctoPressで書いてた記事も、そのうち取り込む予定。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>NeoSnippetを使ってみた</title>
    <link rel="alternate" href="http://3100.github.io/blog/2013/07/26/how-to-use-neosnippet.html"/>
    <id>http://3100.github.io/blog/2013/07/26/how-to-use-neosnippet.html</id>
    <published>2013-07-26T09:15:00Z</published>
    <updated>2013-11-16T01:15:35+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;OctopressのCodeblockの構文が結構気持ち悪い感じです。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;{% raw %}
{% codeblock lang:&amp;lt;lang&amp;gt; %}
&amp;lt;content&amp;gt;
{% endcodeblock %}
{% endraw %}
&lt;/pre&gt;
&lt;p&gt;こんなのを毎回書いていられないので、&lt;a href="https://github.com/Shougo/neosnippet.vim"&gt;Shougo/neosnippet.vim&lt;/a&gt;を使ってみました。
インストールや設定については公式のREADMEを参照。&lt;/p&gt;

&lt;p&gt;markdown用のスニペットファイルを作成するには、以下のコマンドを実行します。(実際には適当なキーにマッピングしてます。)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
:NeoSnippetEdit markdown
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;すると、スニペットフォルダにmarkdown.snipが作られるので、ここにスニペットを記述していきます。&lt;/p&gt;

&lt;p&gt;今回は3つのスニペットを試しに加えてみました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;シンプルなCodeblock&lt;/li&gt;
  &lt;li&gt;ハイライト用のCodeblock&lt;/li&gt;
  &lt;li&gt;ハイパーリンク&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight viml"&gt;&lt;span class="p"&gt;{&lt;/span&gt;% raw %&lt;span class="p"&gt;}&lt;/span&gt;
snippet codeblock
abbr &lt;span class="k"&gt;cb&lt;/span&gt;
alias code &lt;span class="k"&gt;cb&lt;/span&gt;
&lt;span class="k"&gt;options&lt;/span&gt; head
    &lt;span class="p"&gt;{&lt;/span&gt;% codeblock %&lt;span class="p"&gt;}&lt;/span&gt;
    $&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;% endcodeblock %&lt;span class="p"&gt;}&lt;/span&gt;

snippet codeblocklang
abbr cbl
alias codel cbl
&lt;span class="k"&gt;options&lt;/span&gt; head
    &lt;span class="p"&gt;{&lt;/span&gt;% codeblock &lt;span class="k"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;$&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; %&lt;span class="p"&gt;}&lt;/span&gt;
    $&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;% endcodeblock %&lt;span class="p"&gt;}&lt;/span&gt;

snippet hyperlink
abbr hl
alias hl
    &lt;span class="p"&gt;[&lt;/span&gt;$&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;text&lt;span class="p"&gt;}](&lt;/span&gt;$&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;url&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;% endraw %&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;${1}などとあるのは、スニペット展開時に&lt;c-k&gt;(公式設定コピペの場合)を押す度にカーソルが当たる場所です。&lt;/c-k&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これでmarkdownファイルの編集時にcodeなどと入力すると、NeoComplCacheがスニペットを含む候補一覧を表示してくれます。&lt;c-k&gt;(同上)を入力することで展開されます。&lt;/c-k&gt;&lt;/p&gt;

&lt;p&gt;Octopressは他にも似たような構文があるので、よく使いそうなものからどんどん追加してこうかと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>vimの起動速度を改善する</title>
    <link rel="alternate" href="http://3100.github.io/blog/2013/07/26/improve-your-vim-performance.html"/>
    <id>http://3100.github.io/blog/2013/07/26/improve-your-vim-performance.html</id>
    <published>2013-07-26T07:41:00Z</published>
    <updated>2013-11-16T01:15:35+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;ふと気づいたら、vimの起動に2秒ほどかかるようになっていました。そこで、google先生を頼りに、原因の究明と解決策を調べてみました。&lt;/p&gt;

&lt;h2 id="section"&gt;時間計測&lt;/h2&gt;

&lt;h3 id="vim"&gt;とりあえずvimの標準機能で&lt;/h3&gt;

&lt;p&gt;vimにはstartuptimeという実行時オプションがあります。これを使ってみましょう。&lt;/p&gt;

&lt;p&gt;現在の起動時間を計測(hogeファイルにログ保存)&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ vim --startuptime hoge
&lt;/pre&gt;
&lt;p&gt;Xサーバへの接続を行わせずに起動時間を計測&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ vim -X --startuptime hoge
&lt;/pre&gt;
&lt;p&gt;空のvimrcファイルを用いて起動時間を計測&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ vim -u vimrc --noplugin --startuptime hoge
&lt;/pre&gt;
&lt;h3 id="section-1"&gt;プラグインを用いて&lt;/h3&gt;

&lt;p&gt;benchvimrc-vimというプラグインを用いると、各行にかかった時間を計測してくれます。&lt;/p&gt;

&lt;p&gt;NeoBundleを利用している場合は&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;NeoBundle &amp;#39;mattn/benchvimrc-vim&amp;#39;
&lt;/pre&gt;
&lt;p&gt;あるいは&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;NeoBundleLazy &amp;#39;mattn/benchvimrc-vim&amp;#39;, {
  \ &amp;#39;autoload&amp;#39;: {
    \   &amp;#39;commands&amp;#39;: [&amp;#39;BenchVimrc&amp;#39;],
      \  },
    \}
&lt;/pre&gt;
&lt;p&gt;を$HOME/.vimrcなどに追加してください。インストール後、&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;:BenchVimrc
&lt;/pre&gt;
&lt;p&gt;で測定します。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mattn/benchvimrc-vim"&gt;.vimrcの各行ごとにどれくらい時間がかかっているかを測定できる。&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="section-2"&gt;重い原因例&lt;/h2&gt;

&lt;h3 id="setup-clipboard"&gt;setup clipboard&lt;/h3&gt;

&lt;pre class="highlight plaintext"&gt;$ vim -X
&lt;/pre&gt;
&lt;p&gt;で軽くなる場合は$HOME/.vimrcに&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;set clipboard=exclude:.*
&lt;/pre&gt;
&lt;p&gt;と設定すれば同じ効果が得られます。自分の場合はほとんどこいつが原因でした。修正後、起動時間が100ミリ秒に短縮しました。&lt;/p&gt;

&lt;h3 id="inits-3"&gt;inits 3&lt;/h3&gt;

&lt;pre class="highlight plaintext"&gt;$ vim -i NONE
&lt;/pre&gt;
&lt;p&gt;で改善する場合はviminfoファイルなどを生成しないようにするなどの対応で改善可能です。&lt;/p&gt;

&lt;p&gt;viminfoの役割については以下などを参照しましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://nanasi.jp/articles/howto/file/seemingly-unneeded-file.html#viminfo"&gt;vimエディタが(勝手に)作成する、一見、不要に見えるファイルが何をしているか — 名無しのvim使い&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="section-3"&gt;特定プラグインの読み込みに時間がかかっている&lt;/h3&gt;

&lt;p&gt;NeoBundleを利用している前提ですが、NeoBundleLazyを検討しましょう。&lt;/p&gt;

&lt;p&gt;例えば、上のほうで出てきたこの記述ですが&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;NeoBundle &amp;#39;mattn/benchvimrc-vim&amp;#39;
&lt;/pre&gt;
&lt;p&gt;以下のように書き換えることで、:BenchVimrcが呼び出されるまでプラグイン読み込みを遅延できます。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;NeoBundleLazy &amp;#39;mattn/benchvimrc-vim&amp;#39;, {
  \ &amp;#39;autoload&amp;#39;: {
    \   &amp;#39;commands&amp;#39;: [&amp;#39;BenchVimrc&amp;#39;],
      \  },
    \}
&lt;/pre&gt;
&lt;p&gt;autoloadにはcommandsの他、filetypesを指定することもできます。その場合は該当拡張子のファイルが開かれる段階で、プラグイン読み込みが行われます。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://qiita.com/rbtnn/items/600ac451ebb43b2c9c13"&gt;NeoBundleLazyをvimrcに導入した。 - Qiita &lt;/a&gt;&lt;/p&gt;

&lt;h1 id="section-4"&gt;参考&lt;/h1&gt;

&lt;p&gt;その他、以下の記事が役に立ちました。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://rhysd.hatenablog.com/entry/2012/12/19/001145"&gt;「立て！立つんだビムー！」 - sorry, unimplemented:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/14635295/vim-takes-a-very-long-time-to-start-up"&gt;vim takes a very long time to start up - Stack Overflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://mattn.kaoriya.net/software/vim/20120315221158.htm"&gt;Big Sky :: vimrcのどこが重いのかを調べられるプラグイン書いた。&lt;/a&gt;&lt;/p&gt;

</content>
  </entry>
</feed>
