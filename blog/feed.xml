<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Room 3100</title>
  <subtitle>Nothing to see here, citizen.</subtitle>
  <id>http://3100.github.io/blog</id>
  <link href="http://3100.github.io/blog"/>
  <link href="http://3100.github.io/blog/feed.xml" rel="self"/>
  <updated>2014-03-30T05:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>ページ読み込みを高速化するInstantClickを導入しました</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/03/30/use-instant-click.html"/>
    <id>http://3100.github.io/blog/2014/03/30/use-instant-click.html</id>
    <published>2014-03-30T05:00:00Z</published>
    <updated>2014-03-30T05:54:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2 id="section"&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://instantclick.io/"&gt;InstantClick&lt;/a&gt;というツールは、ユーザがハイパーリンクにマウスオーバした段階でページの先読みを行います。
これによりユーザの体感速度が改善するというので、実際にこのブログでも導入してみました。&lt;/p&gt;

&lt;h2 id="section-1"&gt;仕組み&lt;/h2&gt;

&lt;p&gt;InstantClickが行っているのはページの先読みですが、公式サイトの説明によると、ユーザがリンクにマウスカーソルを当ててから実際にリンクするまで、大体200〜300ミリ秒かかっているそうです。&lt;/p&gt;

&lt;p&gt;そこでその間にページを先読みしちゃえばいいよね？という発想になるわけですね。もちろん、マウスオーバしただけでクリックされなかった分は無駄になりますが、そのあたりも設定によって50ミリ秒マウスオーバしてから読み込み、といった調整が可能です。&lt;/p&gt;

&lt;p&gt;内部的にはpushStateとAjax(いわゆるpjax)で実現されています。&lt;/p&gt;

&lt;h2 id="section-2"&gt;導入方法&lt;/h2&gt;

&lt;p&gt;導入方法は簡単です。ページ末尾の方に2行追加するだけ。(jsファイルはダウンロードしておきます)&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&amp;lt;script src="instantclick.min.js" data-no-instant&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script data-no-instant&amp;gt;InstantClick.init();&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;このブログは&lt;a href="http://slim-lang.com/"&gt;slim&lt;/a&gt;テンプレートを用いていますので&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;= javascript_include_tag 'instantclick.min'
script data-no-instant='' InstantClick.init();
&lt;/pre&gt;

&lt;p&gt;こんな感じになります。&lt;/p&gt;

&lt;h2 id="section-3"&gt;確認&lt;/h2&gt;

&lt;p&gt;Firebugなどで確認すると、実際にマウスオーバしただけでページの読み込みが行われることが確認できました。
コンテンツサイズが大きくないので実際の体感速度はそんなに変わりませんが、他のWebにも簡単に適用できそうだということがわかりました。&lt;/p&gt;

&lt;p&gt;MoinMoinや他に管理しているサイトなんかでも、がんばって数十ミリ秒での応答などをやっているので、先読みができればさらに嬉しいなと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Travis CIのビルドスキップ機能について</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/03/30/skip-ci.html"/>
    <id>http://3100.github.io/blog/2014/03/30/skip-ci.html</id>
    <published>2014-03-29T15:30:00Z</published>
    <updated>2014-03-30T05:54:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2 id="section"&gt;概要&lt;/h2&gt;

&lt;p&gt;Travis CIにいつの間にかビルドスキップ機能が追加されていたので、
早速MiddlemanのビルドでもGithub Pages生成後の処理をスキップするようにしました。&lt;/p&gt;

&lt;h2 id="middleman"&gt;Middlemanのビルドについて&lt;/h2&gt;

&lt;p&gt;このblogはMiddlemanを用いていますが、編集用ブランチとサイト生成先ブランチ(master)を分けています。
編集用ブランチをローカルでコミットしてGithubにプッシュすると、Travis CIが自動的にmasterブランチへ静的ファイルを配置するという仕組みです。&lt;/p&gt;

&lt;p&gt;その実態はRakefileを用意して、Travis CIに叩かせるというもので、以下の記事で紹介されていたものを利用しています。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://tricknotes.hateblo.jp/entry/2013/06/17/020229"&gt;Middleman で作った web サイトを Travis + GitHub pages でお手軽に運用する - tricknotesのぼうけんのしょ&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="section-1"&gt;今までの問題点&lt;/h2&gt;

&lt;p&gt;Travis CIのビルドはmasterブランチのコミット時にも動作してしまい、.travis.ymlが見つからないためにエラーが発生していました。&lt;/p&gt;

&lt;p&gt;&lt;img alt="error log" src="/blog/2014/03/30/skip-ci/errorlog.png" /&gt;&lt;/p&gt;

&lt;p&gt;上画像のように、成功ビルドの後に失敗ビルドがつくられています。&lt;/p&gt;

&lt;p&gt;しかし、ビルドスキップを設定することで、この問題を回避できるようになりました。&lt;/p&gt;

&lt;h2 id="section-2"&gt;スキップの設定&lt;/h2&gt;

&lt;p&gt;Travis CIに特定のビルドをスキップさせる方法は単純で、コミットメッセージに&lt;code&gt;[skip ci]&lt;/code&gt;などとあれば良いということです。
上記の自動ビルドではRakefileにてコミットメッセージも設定しているので、その中に&lt;code&gt;[skip ci]&lt;/code&gt;という文字列を含むようにしました。&lt;/p&gt;

&lt;p&gt;この変更をコミットし、プッシュしたところ、無事にmaster生成後のビルドはスキップされるようになりました。&lt;/p&gt;

&lt;p&gt;&lt;img alt="success log" src="/blog/2014/03/30/skip-ci/successlog.png" /&gt;&lt;/p&gt;

&lt;p&gt;上画像のように、masterブランチ自動生成後のビルドはスキップされるようになりました。
今まで、実害はあまりないもののエラービルドが出ることで気持ちがブルーになっていましたが、そうした気分からはようやく解放されそうです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>DigitalOceanにMinecraftサーバを建てる</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/03/29/deploy-your-own-minecraft-server-on-digital-ocean.html"/>
    <id>http://3100.github.io/blog/2014/03/29/deploy-your-own-minecraft-server-on-digital-ocean.html</id>
    <published>2014-03-29T13:00:00Z</published>
    <updated>2014-03-30T05:54:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="Minecraft画像" src="/blog/2014/03/29/deploy-your-own-minecraft-server-on-digital-ocean/minecraft.png" /&gt;&lt;/p&gt;

&lt;h2 id="section"&gt;概要&lt;/h2&gt;

&lt;p&gt;急にMinecraftで遊びたくなることがあるのですが、複数PCにデータが散ってしまっていて、どこに目的のワールドがあるのかわかりません。
そこで、これを機にどのマシンからでも同じワールドにアクセスできるようにしようと思いました。&lt;/p&gt;

&lt;p&gt;今回は最近お世話になっているDigitalOcean上にMinecraftサーバを構築してみます。契約プランは最安($5/月)です。だいたい5人程度までなら遊べるそうです。&lt;/p&gt;

&lt;h2 id="section-1"&gt;手順&lt;/h2&gt;

&lt;h3 id="droplet"&gt;dropletの作成&lt;/h3&gt;

&lt;p&gt;まずDigitalOceanで新しいdropletを作成します。自分が選択したのは&lt;code&gt;Arch Linux 2013.05 x64&lt;/code&gt;ですが、
jreが導入できればなんでも良いと思います。&lt;/p&gt;

&lt;h3 id="section-2"&gt;サーバの初期設定&lt;/h3&gt;

&lt;p&gt;rootのままではセキュリティ上懸念も多いので、専用ユーザを作ると良いでしょう。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sshdの設定ファイルを弄ってパスワードログインをやめ、鍵交換方式にする&lt;/li&gt;
  &lt;li&gt;sshのポートをデフォルトポートから変更しておく&lt;/li&gt;
  &lt;li&gt;必要なポート以外閉じる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったことをしておくと良いのではないかと思います。&lt;/p&gt;

&lt;h3 id="jre"&gt;jreの導入&lt;/h3&gt;

&lt;p&gt;大抵のLinuxには公式リポジトリからjreパッケージが利用可能になっているのではないかと思います。&lt;/p&gt;

&lt;p&gt;Archの場合は、以下で利用可能です。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;sudo pacman -Sy
sudo pacman -S jre7-openjdk
&lt;/pre&gt;

&lt;h3 id="minecraft"&gt;minecraftサーバ用ソフトの導入&lt;/h3&gt;

&lt;p&gt;サーバ用ファイルは現時点の最新版を利用しました。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://s3.amazonaws.com/Minecraft.Download/versions/1.7.5/minecraft_server.1.7.5.jar"&gt;https://s3.amazonaws.com/Minecraft.Download/versions/1.7.5/minecraft_server.1.7.5.jar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上記ファイルを適当なフォルダに配置し、以下のコマンドでMinecraftサーバが起動します。(-d64オプションで64bit版Javaも指定可能)&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;java -Xms512M -Xmx512M -jar minecraft_server.1.7.5.jar
&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;最小確保メモリが512MB&lt;/li&gt;
  &lt;li&gt;最大確保メモリも512MB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の設定ですが、構成によって変えて良いと思います。&lt;/p&gt;

&lt;p&gt;毎回このコマンドを実行するのは面倒くさいので、適当なshファイルに上記コマンドをコピペします。(たとえばstart_server.sh)&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;chmod +x start_server.sh
&lt;/pre&gt;

&lt;p&gt;これで、start_serverと呼ぶだけでMinecraftサーバが立ち上がるようになりました。&lt;/p&gt;

&lt;h3 id="section-3"&gt;スワップ領域の作成&lt;/h3&gt;

&lt;p&gt;DigitalOceanの最小構成プランではこのままだと不安定なので、別途スワップ領域を作成する必要があります。&lt;/p&gt;

&lt;p&gt;メモリが不足した場合にSSDを仮想メモリとみなすように設定していきます。/swapfileをスワップ領域として最大512MB確保できるようにします。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;sudo fallocate -l 512M /swapfile
sudo chmod 600 /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
&lt;/pre&gt;

&lt;p&gt;また、&lt;code&gt;/etc/fstab&lt;/code&gt;を編集し、以下を追加します。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;/swapfile none  swap  defaults  0 0
&lt;/pre&gt;

&lt;p&gt;ここまででスワップ領域が利用可能になりました。
このままでも良いですが、メモリが余っている時にスワップ領域を使い続けることはパフォーマンス上あまり嬉しくないので、そのあたりもいい感じに設定します。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;sudo sysctl vm.swappiness=10
sudo sysctl vm.vfs_cache_pressure=50
&lt;/pre&gt;

&lt;h2 id="minecraft-1"&gt;Minecraftサーバ設定&lt;/h2&gt;

&lt;p&gt;特定ユーザを管理者登録するなどの設定は公式他、日本語の情報がたくさんあるので割愛します。自分は以下のサイトを参考にしました。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://nasutan.net/minecraft/server-win/serverproperties/"&gt;【サルでもわかる！初めてのマインクラフト講座】- サーバ設定 - なす探！&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="section-4"&gt;まとめ&lt;/h2&gt;

&lt;p&gt;意外と簡単にMinecraftサーバを建てることが出来ました。DigitalOceanは転送料制限がある(超えると課金される)ので心配をしていましたが、Minecraftの通信料は気にするほどではなさそうです。&lt;/p&gt;

&lt;p&gt;まだ同時接続人数が2人以上を経験していませんが、CPU使用率は30%程度です。参考にした記事にも5人から8人くらいが限度と書かれていましたが、だいたいそのくらいの人数までは遊ぶことができそうです。&lt;/p&gt;

&lt;p&gt;$5/月くらいなら仲間うちで割り勘しても良いくらいのコストですし、Minecraftサーバ、結構オススメです。&lt;/p&gt;

&lt;h2 id="section-5"&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://otoris.com/host-your-own-minecraft-and-mumble-server-for-5month/"&gt;Host your own Minecraft server for $5/month&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.digitalocean.com/community/articles/how-to-add-a-swap-file-on-an-arch-linux-cloud-server"&gt;How to Add a Swap File on an Arch Linux Cloud Server - DigitalOcean&lt;/a&gt;&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>MoinMoin WikiをNginxで動かす</title>
    <link rel="alternate" href="http://3100.github.io/blog/2013/11/16/moin-with-nginx.html"/>
    <id>http://3100.github.io/blog/2013/11/16/moin-with-nginx.html</id>
    <published>2013-11-15T15:00:00Z</published>
    <updated>2014-03-30T05:54:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;さくらVPSで動かしていた&lt;a href="http://moinmo.in/"&gt;MoinMoin Wiki&lt;/a&gt;を&lt;a href="https://www.digitalocean.com/"&gt;DigitalOcean&lt;/a&gt;に移行することにしました。
これを機に、WebサーバもApacheからNginxに移行しました。&lt;/p&gt;

&lt;p&gt;DigitalOceanのdroplet(仮想インスタンス)はArch Linux 64bit版です。とりあえず使うだけなら、512MBで問題ないでしょう。&lt;/p&gt;

&lt;h2 id="moinmoin"&gt;MoinMoinのインストール&lt;/h2&gt;

&lt;p&gt;まずMoinMoinをインストールします。公式サイトからソースを落としてきてもいいですが、
今回は以下のパッケージを利用しました。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.archlinux.org/packages/community/any/moinmoin/"&gt;Arch Linux - moinmoin 1.9.7-1 (any)&lt;/a&gt;&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ sudo pacman -S moin
&lt;/pre&gt;

&lt;p&gt;デフォルトのインストール先は/usr/share/moinになります。&lt;/p&gt;

&lt;h2 id="nginx"&gt;Nginxのインストール&lt;/h2&gt;

&lt;p&gt;同様にNginxもインストールします。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ sudo pacman -S nginx
&lt;/pre&gt;

&lt;h2 id="uwsgi"&gt;uWSGIのインストール&lt;/h2&gt;

&lt;p&gt;今回、MoinMoinはWSGIを利用します。
&lt;a href="http://projects.unbit.it/uwsgi/"&gt;uWSGI&lt;/a&gt;をNginxと組み合わせることで、MoinMoinをNginx上で動かすことができるようになります。&lt;/p&gt;

&lt;p&gt;uWSGIについてもう少し知りたい方は以下のブログ記事が参考になります。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/m-hiyama/20120312/1331513519"&gt;便利で超強力なWSGIサーバー uWSGI を使ってみよう - 檜山正幸のキマイラ飼育記&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;話を戻して、uWSGIをインストールします。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ sudo pacman -S uwsgi uwsgi-plugin-python
&lt;/pre&gt;

&lt;h2 id="section"&gt;設定&lt;/h2&gt;

&lt;h3 id="uwsgi-1"&gt;uWSGI&lt;/h3&gt;

&lt;p&gt;まず、uWSGIの設定を行います。uWSGIはini、xml、json等の形式で設定ファイルを記述できますが、今回はini形式で書きました。
/etc/uwsgi/moin.iniに下記のような設定を記述しています。&lt;/p&gt;

&lt;pre class="highlight ini"&gt;&lt;span class="nn"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="py"&gt;plugins&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;python2&lt;/span&gt;
&lt;span class="err"&gt;ignore-script-name&lt;/span&gt;
&lt;span class="py"&gt;processes&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;4&lt;/span&gt;
&lt;span class="err"&gt;limit-&lt;/span&gt;&lt;span class="py"&gt;as&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;256&lt;/span&gt;
&lt;span class="err"&gt;wsgi-&lt;/span&gt;&lt;span class="py"&gt;file&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/usr/share/moin/server/moin.wsgi&lt;/span&gt;
&lt;span class="py"&gt;socket&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/tmp/moin.sock&lt;/span&gt;
&lt;span class="err"&gt;chmod-&lt;/span&gt;&lt;span class="py"&gt;socket&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;777&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;chmod-socketのパーミションを777にしているのは、実行時にパーミションエラーが発生したためです。。
もし、より良い解決法がある場合は、教えていただけると幸いです。&lt;/p&gt;

&lt;p&gt;この設定をもとにuwsgiを立ち上げます。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ sudo systemctl enable uwsgi@moin.service
$ sudo systemctl start uwsgi@moin.service
&lt;/pre&gt;

&lt;h3 id="nginx-1"&gt;Nginx&lt;/h3&gt;

&lt;p&gt;続いて、Nginxの設定です。/etc/nginx/nginx.confを編集します。&lt;/p&gt;

&lt;pre class="highlight nginx"&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;uwsgi_modifier1&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;uwsgi_pass&lt;/span&gt; &lt;span class="s"&gt;unix:/tmp/moin.sock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/moin_static197/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;/usr/share/moin/htdocs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;実際にはExpiresやCache-Control、Gzipなどの設定も必要でしょうが、とりあえず動かすだけならこれでよいと思います。&lt;/p&gt;

&lt;p&gt;以下で、サービスを開始できるようになります。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ sudo systemctl enable nginx
$ sudo systemctl start nginx
&lt;/pre&gt;

&lt;h3 id="moinmoin-1"&gt;MoinMoin&lt;/h3&gt;

&lt;p&gt;あとはMoinMoinの設定をお好みに応じて変更するだけです。&lt;/p&gt;

&lt;p&gt;/usr/share/moin/config/wikiconfig.pyを編集します。&lt;/p&gt;

&lt;p&gt;とりあえず、以下だけ修正しておけば良いのではないでしょうか。&lt;/p&gt;

&lt;pre class="highlight python"&gt;&lt;span class="n"&gt;sitename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;u'Your Wiki'&lt;/span&gt;
&lt;span class="n"&gt;log_reverse_dns_lookups&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;tz_offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;9.0&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;以下のページも読むと、どういったことを設定可能かわかりやすいでしょう。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://moinmo.in/HelpOnConfiguration"&gt;HelpOnConfiguration - MoinMoin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;wikiconfig.pyを編集した場合は、uwsgiを再起動することで、反映されます。&lt;/p&gt;

&lt;h2 id="section-1"&gt;おわり&lt;/h2&gt;

&lt;p&gt;ここまでで、無事にMoinMoinが立ち上がっていることと思います。
最初のLanguageSetupを行うために、ユーザ登録をして、
そのユーザ名をwikiconfig.pyに登録して、uwsgiを再起動することになります。&lt;/p&gt;

&lt;p&gt;LanguageSetupも完了すれば、あとはMoinMoinを好きに弄っていくだけです！&lt;/p&gt;

&lt;p&gt;尚、初期状態ではMoinの検索エンジンは遅いので、Xapianを導入するのも良いでしょう。
これについてもそのうち記事を書きたいと思います。&lt;/p&gt;

&lt;p&gt;お疲れ様でした。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>rbenvでruby2.0を入れようとするとOpensslのエラーが出る</title>
    <link rel="alternate" href="http://3100.github.io/blog/2013/11/08/openssl-error-installing-ruby-2.html"/>
    <id>http://3100.github.io/blog/2013/11/08/openssl-error-installing-ruby-2.html</id>
    <published>2013-11-07T15:00:00Z</published>
    <updated>2014-03-30T05:54:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Marvericksを入れた後のMacでrbenvからRuby2.0を入れようとするとエラーになってしまいました。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ gem install 2.0.0-p0
Downloading ruby-2.0.0-p0.tar.gz...
-&amp;gt; http://dqw8nmjcqpjn7.cloudfront.net/50d307c4dc9297ae59952527be4e755d
Installing ruby-2.0.0-p0...

BUILD FAILED

Inspect or clean up the working tree at /var/folders/8h/mdr7s3ns64sfnscg5c4h2w0c0000gn/T/ruby-build.20131108212415.26000
Results logged to /var/folders/8h/mdr7s3ns64sfnscg5c4h2w0c0000gn/T/ruby-build.20131108212415.26000.log

Last 10 log lines:
installing default gems:      /Users/zero/.rbenv/versions/2.0.0-p0/lib/ruby/gems/2.0.0 (build_info, cache, doc, gems, specifications)
                              bigdecimal 1.2.0
                              io-console 0.4.2
                              json 1.7.7
                              minitest 4.3.2
                              psych 2.0.0
                              rake 0.9.6
                              rdoc 4.0.0
                              test-unit 2.0.0.0
The Ruby openssl extension was not compiled. Missing the OpenSSL lib?
&lt;/pre&gt;

&lt;p&gt;調べるとドンピシャな解答がStack Overflowにありました。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ CONFIGURE_OPTS="--with-openssl-dir=`brew --prefix openssl`" rbenv install 2.0.0-p0
&lt;/pre&gt;

&lt;p&gt;もちろん、openssl自体がインストールされていない環境ではあらかじめインストールしておく必要があります。Homebrewを利用しているなら&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ brew install openssl
&lt;/pre&gt;

&lt;p&gt;ですね。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/17181075/openssl-error-installing-ruby-2-0-0-p195-on-mac-with-rbenv"&gt;homebrew - OpenSSL error installing ruby 2.0.0-p195 on Mac with rbenv - Stack Overflow&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>middleman-blogのハイライトにMonokaiテーマを使う</title>
    <link rel="alternate" href="http://3100.github.io/blog/2013/10/31/monokai-theme-to-middleman-blog.html"/>
    <id>http://3100.github.io/blog/2013/10/31/monokai-theme-to-middleman-blog.html</id>
    <published>2013-10-30T15:00:00Z</published>
    <updated>2014-03-30T05:54:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;middleman-blogには、コードをシンタックスハイライトする機能があります。
middleman-syntaxをGemfileに加えて、必要な設定をconfig.rbに書くだけです。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/middleman/middleman-syntax"&gt;middleman/middleman-syntax&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;kramdownを使う場合は&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:markdown_engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:kramdown&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;redcarpetなら&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:markdown_engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:redcarpet&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:markdown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:fenced_code_blocks&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:smartypants&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;ですかね。&lt;/p&gt;

&lt;p&gt;middleman-syntaxは内部でrougeというruby製pygmentsを目指しているハイライトパーサを使用しています。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jayferd/rouge"&gt;jayferd/rouge&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これを利用して、rougeに用意されているハイライトテーマを利用することができるようです。具体的には&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ThankfulEyes&lt;/li&gt;
  &lt;li&gt;Colorful&lt;/li&gt;
  &lt;li&gt;Github&lt;/li&gt;
  &lt;li&gt;Base16&lt;/li&gt;
  &lt;li&gt;Base16::Solarized (Octopress風らしいです)&lt;/li&gt;
  &lt;li&gt;Base16::Monokai&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;があります。(Base16::Monokaiは基本色を使っているせいか？地味です。。)&lt;/p&gt;

&lt;p&gt;これをmiddlemanで利用するには、stylesheets/highlight.css.erbなどというcss生成ファイルを作って以下のように書き込み&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sx"&gt;%= Rouge::Themes::Github.render(:scope =&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'.highlight'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="sx"&gt;%&amp;gt;
&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;あとはHTML上でhighlight.cssを読み込むようにします。&lt;/p&gt;

&lt;h3 id="section"&gt;ところで(割りと無駄話)&lt;/h3&gt;

&lt;p&gt;ざっと見た感じ、あまりいい感じのハイライトが見つかりません。
そこで、pygments-cssを参考にして作ったMonokaiをrougeに加えてもらいました。
何気に内輪じゃないOSSへは初のプルリクでしたが、無事取り込まれました。&lt;/p&gt;

&lt;p&gt;まだ、gemには反映されていなので、middleman-syntaxをフォークして中のGemfileを修正する必要があります。&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;"rouge"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:git&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"git://github.com/jayferd/rouge.git"&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;これをさらに、middlemanのGemfileで指定します。&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;"middleman-syntax"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:git&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"git://github.com/&amp;lt;あなたのid&amp;gt;/middleman-syntax.git"&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;あとはbundle updateすれば良いはずです。これで無事Monokaiを使えるようになりました。&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sx"&gt;%= Rouge::Themes::Monokai.render(:scope =&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'.highlight'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="sx"&gt;%&amp;gt;
&lt;/span&gt;&lt;/pre&gt;

&lt;h3 id="section-1"&gt;もっとシンプルな方法&lt;/h3&gt;

&lt;p&gt;実はmiddleman-syntaxはpygments用cssファイルを取り込めるらしいです。
ですので、stylesheets/highlight.css.erbを作る代わりに、
目的のテーマ用cssを直接HTMLから指定するだけで済むようです。&lt;/p&gt;

&lt;p&gt;試してはいませんが、monokai.cssというものも見つかりました。若干直せば使えそうに見えます。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/richleland/pygments-css/blob/master/monokai.css"&gt;pygments-css/monokai.css at master · richleland/pygments-css&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="section-2"&gt;というわけで&lt;/h3&gt;

&lt;p&gt;以下、Monokaiのサンプルになります。&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="c1"&gt;# The Greeter class&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Greeter&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;capitalize&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;salute&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Hello &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Create a new object&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Greeter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Output "Hello World!"&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;salute&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Happy highlighting!&lt;/p&gt;

&lt;h3 id="section-3"&gt;余談&lt;/h3&gt;

&lt;p&gt;元々SublimeText2風のテーマが欲しくてMonokaiに辿り着いたのですが、
よく見ると色パレットは似ていても配色パターンが違いますね。。
個人的にはhighlight.jsのmonokaiがST2っぽいなと思っています。
これは、ST2風も作るべきか。。&lt;/p&gt;
</content>
  </entry>
</feed>
