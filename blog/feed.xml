<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Room 3100</title>
  <subtitle>Nothing to see here, citizen.</subtitle>
  <id>http://3100.github.io/blog</id>
  <link href="http://3100.github.io/blog"/>
  <link href="http://3100.github.io/blog/feed.xml" rel="self"/>
  <updated>2015-05-07T13:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>新生活で買ってよかったもの(調理編)</title>
    <link rel="alternate" href="http://3100.github.io/blog/2015/05/07/best-buy-cook.html"/>
    <id>http://3100.github.io/blog/2015/05/07/best-buy-cook.html</id>
    <published>2015-05-07T13:00:00Z</published>
    <updated>2015-05-07T16:26:54+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;昨年の夏に引っ越しをし、2LDK(+小部屋2つ)でのふたり暮らしを開始してだいたい10ヶ月がたちました。
そこでたまには趣向を変えて、現在までに新生活に大変役だっている物を上げてみようと思います。(夏の賞与もそろそろですし！)&lt;/p&gt;

&lt;p&gt;書き始めてみると意外とお気に入りが多くなってしまったため、まずは3大欲求のうちの1つ食欲を満たすものとして、調理関係のもののみピックアップしてみます。&lt;/p&gt;

&lt;h1 id="section"&gt;料理&lt;/h1&gt;

&lt;p&gt;一人暮らしの時にもいくつかの調理器具を揃えたりしていましたが、
やはり色々と必要になりました。&lt;/p&gt;

&lt;h2 id="section-1"&gt;長谷園 かまどさん(炊飯)&lt;/h2&gt;

&lt;p&gt;『長谷園 かまどさん』はその筋ではよく知られた炊飯用の土鍋です。&lt;/p&gt;

&lt;table border="0" cellpadding="5"&gt;&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/B002DY3B7K/unplu-22/ref=nosim/" target="_blank"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/51am4RLvuRL._SL160_.jpg" border="0" alt="長谷園 かまどさん五合炊(直火専用)  CT-50" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;font size="-1"&gt;&lt;a href="http://www.amazon.co.jp/%E9%95%B7%E8%B0%B7%E8%A3%BD%E9%99%B6-CT-50-%E9%95%B7%E8%B0%B7%E5%9C%92-%E3%81%8B%E3%81%BE%E3%81%A9%E3%81%95%E3%82%93%E4%BA%94%E5%90%88%E7%82%8A-%E7%9B%B4%E7%81%AB%E5%B0%82%E7%94%A8/dp/B002DY3B7K%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dunplu-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB002DY3B7K" target="_blank"&gt;長谷園 かまどさん五合炊(直火専用)  CT-50&lt;/a&gt;&lt;img src="http://www.assoc-amazon.jp/e/ir?t=unplu-22&amp;amp;l=ur2&amp;amp;o=9" width="1" height="1" style="border: none;" alt="" /&gt;&lt;br /&gt;&lt;br /&gt;長谷製陶  &lt;br /&gt;売り上げランキング : 47846&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.amazon.co.jp/%E9%95%B7%E8%B0%B7%E8%A3%BD%E9%99%B6-CT-50-%E9%95%B7%E8%B0%B7%E5%9C%92-%E3%81%8B%E3%81%BE%E3%81%A9%E3%81%95%E3%82%93%E4%BA%94%E5%90%88%E7%82%8A-%E7%9B%B4%E7%81%AB%E5%B0%82%E7%94%A8/dp/B002DY3B7K%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dunplu-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB002DY3B7K" target="_blank"&gt;Amazonで詳しく見る&lt;/a&gt;&lt;/font&gt; &lt;font size="-2"&gt;by &lt;a href="http://www.goodpic.com/mt/aws/index.html"&gt;G-Tools&lt;/a&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;table border="0" cellpadding="5"&gt;&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/B000WMK73Q/unplu-22/ref=nosim/" target="_blank"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/41cl1EPOD%2BL._SL160_.jpg" border="0" alt="長谷園 かまどさん三合炊(直火専用) CT-01" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;font size="-1"&gt;&lt;a href="http://www.amazon.co.jp/%E9%95%B7%E8%B0%B7%E8%A3%BD%E9%99%B6-CT-01-%E9%95%B7%E8%B0%B7%E5%9C%92-%E3%81%8B%E3%81%BE%E3%81%A9%E3%81%95%E3%82%93%E4%B8%89%E5%90%88%E7%82%8A-%E7%9B%B4%E7%81%AB%E5%B0%82%E7%94%A8/dp/B000WMK73Q%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dunplu-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB000WMK73Q" target="_blank"&gt;長谷園 かまどさん三合炊(直火専用) CT-01&lt;/a&gt;&lt;img src="http://www.assoc-amazon.jp/e/ir?t=unplu-22&amp;amp;l=ur2&amp;amp;o=9" width="1" height="1" style="border: none;" alt="" /&gt;&lt;br /&gt;&lt;br /&gt;長谷製陶  &lt;br /&gt;売り上げランキング : 4678&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.amazon.co.jp/%E9%95%B7%E8%B0%B7%E8%A3%BD%E9%99%B6-CT-01-%E9%95%B7%E8%B0%B7%E5%9C%92-%E3%81%8B%E3%81%BE%E3%81%A9%E3%81%95%E3%82%93%E4%B8%89%E5%90%88%E7%82%8A-%E7%9B%B4%E7%81%AB%E5%B0%82%E7%94%A8/dp/B000WMK73Q%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dunplu-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB000WMK73Q" target="_blank"&gt;Amazonで詳しく見る&lt;/a&gt;&lt;/font&gt; &lt;font size="-2"&gt;by &lt;a href="http://www.goodpic.com/mt/aws/index.html"&gt;G-Tools&lt;/a&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id="section-2"&gt;購入経緯&lt;/h3&gt;

&lt;p&gt;大学入学以来よくある3合炊き炊飯器を使っていました。
かなり使い古していたのでさすがに新調しようと思い、当初はビックカメラなどで最先端の電気釜を物色していました。
しかし、あまりデザイン的にピンとくるものがないのと、価格も平気で5万円を越えるものが多いので躊躇していました。&lt;/p&gt;

&lt;p&gt;その頃、ちょうど『かまどさん』がいくつかの本で紹介され、また表参道にある&lt;a href="http://www.spiral.co.jp/"&gt;スパイラル&lt;/a&gt;などの良質な雑貨やさんで取り扱いされているのを見つけて、
評判も良いこと、使い方も難しくないらしい(火加減調節不要)こと、価格も電気釜に比べて安い(1万円くらい)ことなどを理由に
ダメで元々と、5合炊きをAmazonで購入しました。&lt;/p&gt;

&lt;p&gt;無印良品にも類似品がありましたが、見た目的にも『かまどさん』で良かったなと思っています。
以来、外食を含めても、自宅で食べるご飯が一番美味しいです。&lt;/p&gt;

&lt;h3 id="section-3"&gt;気に入っている点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;炊飯器には二度と戻れない&lt;/strong&gt;くらいお米が美味しく炊ける。&lt;/li&gt;
  &lt;li&gt;お米が立つ、の意味がわかる。&lt;/li&gt;
  &lt;li&gt;火加減調節が不要で簡単(約15分ほど中強火にかけるだけ)。&lt;/li&gt;
  &lt;li&gt;人を呼んだときにも存在感がある。&lt;/li&gt;
  &lt;li&gt;電気炊飯器に比べて安価。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="section-4"&gt;イマイチな点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;保温機能はない&lt;/strong&gt;ので、食事時間がばらばらの場合には困るかも(1時間くらいで冷める)。&lt;/li&gt;
  &lt;li&gt;5合炊きだとさすがに重いので、女性の場合には慣れるまで若干億劫かも。&lt;/li&gt;
  &lt;li&gt;陶器なので、初めて使う際にはお米のとぎ汁で目止めをする必要があります。(説明書あり)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="section-5"&gt;備考&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;一緒に土の鍋敷きと木製しゃもじも添付されていました(今もあるかは不明)。&lt;/li&gt;
  &lt;li&gt;新潟でご当地のコシヒカリを戴いた時、その美味しさに感動したと共に、業務用炊飯器なので残念に感じました。&lt;/li&gt;
  &lt;li&gt;普段は4合炊いて、余った分を冷凍庫の急速冷凍で保存しています。電子レンジで温めてもそこそこ美味しいです。&lt;/li&gt;
  &lt;li&gt;五目ご飯なども問題なく可能です。おこげが美味しく出来上がります。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="section-6"&gt;グローバル 包丁&lt;/h2&gt;

&lt;p&gt;『グローバル』の包丁は贈り物などでもよく用いられるステンレス包丁です。吉田金属工業製。&lt;/p&gt;

&lt;table border="0" cellpadding="5"&gt;&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/B0006A03QA/unplu-22/ref=nosim/" target="_blank"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/41d2Jw-CuHL._SL160_.jpg" border="0" alt="GLOBAL 三徳 刃渡り18ｃｍ G-46" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;font size="-1"&gt;&lt;a href="http://www.amazon.co.jp/%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB-G-46-GLOBAL-%E4%B8%89%E5%BE%B3-%E5%88%83%E6%B8%A1%E3%82%8A18%EF%BD%83%EF%BD%8D/dp/B0006A03QA%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dunplu-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB0006A03QA" target="_blank"&gt;GLOBAL 三徳 刃渡り18ｃｍ G-46&lt;/a&gt;&lt;img src="http://www.assoc-amazon.jp/e/ir?t=unplu-22&amp;amp;l=ur2&amp;amp;o=9" width="1" height="1" style="border: none;" alt="" /&gt;&lt;br /&gt;&lt;br /&gt;グローバル  &lt;br /&gt;売り上げランキング : 2217&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.amazon.co.jp/%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB-G-46-GLOBAL-%E4%B8%89%E5%BE%B3-%E5%88%83%E6%B8%A1%E3%82%8A18%EF%BD%83%EF%BD%8D/dp/B0006A03QA%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dunplu-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB0006A03QA" target="_blank"&gt;Amazonで詳しく見る&lt;/a&gt;&lt;/font&gt; &lt;font size="-2"&gt;by &lt;a href="http://www.goodpic.com/mt/aws/index.html"&gt;G-Tools&lt;/a&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;table border="0" cellpadding="5"&gt;&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00005OL3S/unplu-22/ref=nosim/" target="_blank"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/21NDirnf9HL._SL160_.jpg" border="0" alt="GLOBAL ペティーナイフ 刃渡り13cm GS-3" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;font size="-1"&gt;&lt;a href="http://www.amazon.co.jp/%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB-GS-3-GLOBAL-%E3%83%9A%E3%83%86%E3%82%A3%E3%83%BC%E3%83%8A%E3%82%A4%E3%83%95-%E5%88%83%E6%B8%A1%E3%82%8A13cm/dp/B00005OL3S%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dunplu-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB00005OL3S" target="_blank"&gt;GLOBAL ペティーナイフ 刃渡り13cm GS-3&lt;/a&gt;&lt;img src="http://www.assoc-amazon.jp/e/ir?t=unplu-22&amp;amp;l=ur2&amp;amp;o=9" width="1" height="1" style="border: none;" alt="" /&gt;&lt;br /&gt;&lt;br /&gt;グローバル  &lt;br /&gt;売り上げランキング : 1203&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.amazon.co.jp/%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB-GS-3-GLOBAL-%E3%83%9A%E3%83%86%E3%82%A3%E3%83%BC%E3%83%8A%E3%82%A4%E3%83%95-%E5%88%83%E6%B8%A1%E3%82%8A13cm/dp/B00005OL3S%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dunplu-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB00005OL3S" target="_blank"&gt;Amazonで詳しく見る&lt;/a&gt;&lt;/font&gt; &lt;font size="-2"&gt;by &lt;a href="http://www.goodpic.com/mt/aws/index.html"&gt;G-Tools&lt;/a&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id="section-7"&gt;購入経緯&lt;/h3&gt;

&lt;p&gt;実家は食にうるさい家庭で多種多様な包丁があり、そうした環境に育ったものの、一人暮らしでは安い包丁ばかりつかっていました。
折角の新生活なのだからということで長く使えるものを選ぼうと思い、色々知識を仕入れていました。&lt;/p&gt;

&lt;p&gt;個人的には『グローバル』はすぐに切れなくなるといった評判を見ていて、それならと一生ものと名高い『&lt;a href="http://www.kyoto-nishiki.or.jp/stores/aritsugu/"&gt;京都有次&lt;/a&gt;』などの包丁も気になっていたのですが、鉄包丁の手入れに自信がなかったのと、同居人がデザイン的に前者を気に入ってしまいました。
洋包丁2本にする(自分はこちら)か、和洋1本ずつにする(同居人)かを少し悩んだものの、先がやや丸いということで牛刀ではなく三徳包丁を選びました。
(文化包丁はださいのでナシ)&lt;/p&gt;

&lt;p&gt;先にお試しで三徳包丁だけを&lt;a href="http://www.kappabashi.or.jp/"&gt;合羽橋&lt;/a&gt;で買い、その後ペティナイフをAmazon(あるいはLOFT)で買ったと記憶しています。
大抵シャープナー(簡易研ぎ器)を薦められるのですが、刃の寿命を短くしてしまうので砥石がオススメです。
砥石が面倒な場合、吉田金属工業へ送ると約1000円ほどで研ぎ直しを行ってくれます。&lt;/p&gt;

&lt;h3 id="section-8"&gt;気にいっている点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;最初の切れ味がとても良い。トマトも水々しいまま切れる。&lt;/li&gt;
  &lt;li&gt;デザインが良い。有名なので同じものを持っている人によく会う。&lt;/li&gt;
  &lt;li&gt;困ったらメンテナンスサービスがしっかりしているという安心感。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="section-9"&gt;イマイチな点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;この包丁に限らないが、&lt;strong&gt;良い包丁は研がないと切れなくなる&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="section-10"&gt;備考&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;良い包丁があればパン切り包丁は要らないというが、固いバケットなどにはあったほうが便利。&lt;/li&gt;
  &lt;li&gt;三徳包丁ではカボチャを切るのが限度。&lt;/li&gt;
  &lt;li&gt;予算的に1本しか買えないのならペティナイフで良いと思います。やや小さいですが取り回しは良いです。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="section-11"&gt;デバイヤー フライパン&lt;/h2&gt;

&lt;p&gt;Amazonで良く見かける安価なフランス製鉄フライパンです。&lt;/p&gt;

&lt;table border="0" cellpadding="5"&gt;&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00462QP0M/unplu-22/ref=nosim/" target="_blank"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/31K3sigxNIL._SL160_.jpg" border="0" alt="de BUYER フライパン 24cm 5610.24" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;font size="-1"&gt;&lt;a href="http://www.amazon.co.jp/de-BUYER-%E3%83%95%E3%83%A9%E3%82%A4%E3%83%91%E3%83%B3-24cm-5610-24/dp/B00462QP0M%3Fpsc%3D1%26SubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dunplu-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB00462QP0M" target="_blank"&gt;de BUYER フライパン 24cm 5610.24&lt;/a&gt;&lt;img src="http://www.assoc-amazon.jp/e/ir?t=unplu-22&amp;amp;l=ur2&amp;amp;o=9" width="1" height="1" style="border: none;" alt="" /&gt;&lt;br /&gt;&lt;br /&gt;deBUYER(デバイヤー)  &lt;br /&gt;売り上げランキング : 34243&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.amazon.co.jp/de-BUYER-%E3%83%95%E3%83%A9%E3%82%A4%E3%83%91%E3%83%B3-24cm-5610-24/dp/B00462QP0M%3Fpsc%3D1%26SubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dunplu-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB00462QP0M" target="_blank"&gt;Amazonで詳しく見る&lt;/a&gt;&lt;/font&gt; &lt;font size="-2"&gt;by &lt;a href="http://www.goodpic.com/mt/aws/index.html"&gt;G-Tools&lt;/a&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id="section-12"&gt;購入経緯&lt;/h3&gt;

&lt;p&gt;ずっと使っていたテフロンフライパンのテフロンが剥げてきて、なんらかのフライパンを調達する必要がありました。
個人的には鉄フライパンが気になっていて、色々なお店を回りましたが良さそうなものはいいお値段(1万円超え)がします。
ネットでレビューやブログなどを漁ると、意外とデバイヤーの評判が良いことに気づき、Amazonから購入しました。&lt;/p&gt;

&lt;p&gt;デバイヤーの鉄フライパンにはラッカー仕上げと蜜蝋ワックス仕上げがあります。
個人的には最初の手入れが楽なので蜜蝋ワックス仕上げをお勧めします。
蜜蝋ワックス仕上げのものは取っ手に黄色いマークがあります。(パンの中央部にも刻印があります)&lt;/p&gt;

&lt;h3 id="section-13"&gt;気にいっている点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;料理の具材への火の通りがとても良く、&lt;strong&gt;腕前が上達&lt;/strong&gt;したと錯覚します。&lt;/li&gt;
  &lt;li&gt;厚さもきちんとあるので、ステーキなども&lt;strong&gt;鉄板焼きのクオリティ&lt;/strong&gt;で仕上がります。&lt;/li&gt;
  &lt;li&gt;油通しすればこびりつかない(万が一こびりついてしまった場合も、お湯を沸かした後金属たわしで落ちます。)&lt;/li&gt;
  &lt;li&gt;鉄フライパン全般に言えますが、洗剤を使わないのでエコ(笑)。&lt;/li&gt;
  &lt;li&gt;油を扱うと汚れを落とすのが大変なテフロン加工フライパンより、手入れが楽だと思います。&lt;/li&gt;
  &lt;li&gt;間違いなく一生使えるでしょう。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="section-14"&gt;イマイチな点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;厚さがあるので重いです。28cmのものは24cmから300gほど重くなります。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="section-15"&gt;備考&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;24cmは目玉焼きでぎりぎり3人前くらいの目安です。パーティ用に28cmがあってもよいでしょう。&lt;/li&gt;
  &lt;li&gt;個人的にはこの後スキレットも欲しいなと考えています。&lt;/li&gt;
  &lt;li&gt;包装がフランスの肉屋や八百屋などで見かける紙製の袋なのですが、とてもセンスが良かった。&lt;/li&gt;
  &lt;li&gt;扱っているお店が少ない気がするのですが、何故でしょうか。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="section-16"&gt;クイジナート ハンドミキサー&lt;/h2&gt;

&lt;p&gt;調理用機器で有名なクイジナートのハンドミキサーです。パワーがあります。&lt;/p&gt;

&lt;table border="0" cellpadding="5"&gt;&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HYRFA98/unplu-22/ref=nosim/" target="_blank"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/41awQ5O4zrL._SL160_.jpg" border="0" alt="Cuisinart スマートパワーハンドミキサー HM-50J" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;font size="-1"&gt;&lt;a href="http://www.amazon.co.jp/Cuisinart-%E3%82%AF%E3%82%A4%E3%82%B8%E3%83%8A%E3%83%BC%E3%83%88-HM-50J-%E3%82%B9%E3%83%9E%E3%83%BC%E3%83%88%E3%83%91%E3%83%AF%E3%83%BC%E3%83%8F%E3%83%B3%E3%83%89%E3%83%9F%E3%82%AD%E3%82%B5%E3%83%BC/dp/B00HYRFA98%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dunplu-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB00HYRFA98" target="_blank"&gt;Cuisinart スマートパワーハンドミキサー HM-50J&lt;/a&gt;&lt;img src="http://www.assoc-amazon.jp/e/ir?t=unplu-22&amp;amp;l=ur2&amp;amp;o=9" width="1" height="1" style="border: none;" alt="" /&gt;&lt;br /&gt;&lt;br /&gt;Cuisinart (クイジナート)  2013-11-01&lt;br /&gt;売り上げランキング : 3086&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.amazon.co.jp/Cuisinart-%E3%82%AF%E3%82%A4%E3%82%B8%E3%83%8A%E3%83%BC%E3%83%88-HM-50J-%E3%82%B9%E3%83%9E%E3%83%BC%E3%83%88%E3%83%91%E3%83%AF%E3%83%BC%E3%83%8F%E3%83%B3%E3%83%89%E3%83%9F%E3%82%AD%E3%82%B5%E3%83%BC/dp/B00HYRFA98%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dunplu-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB00HYRFA98" target="_blank"&gt;Amazonで詳しく見る&lt;/a&gt;&lt;/font&gt; &lt;font size="-2"&gt;by &lt;a href="http://www.goodpic.com/mt/aws/index.html"&gt;G-Tools&lt;/a&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id="section-17"&gt;購入経緯&lt;/h3&gt;

&lt;p&gt;元々自分がよく料理をしていたものの、同居人はあまり料理経験がありませんでした。
しかし、お菓子はよく作っていたとのことなので、良いハンドミキサーが欲しいねということになり
このハイパワーなハンドミキサーを購入することになりました。&lt;/p&gt;

&lt;h3 id="section-18"&gt;気にいっている点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;ハイパワー。&lt;/li&gt;
  &lt;li&gt;レトロなデザインが良いです。&lt;/li&gt;
  &lt;li&gt;美味しい手作り菓子が週に何回も登場するようになりました。&lt;/li&gt;
  &lt;li&gt;料理にも使えます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="section-19"&gt;イマイチな点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;ハイパワーすなわちうるさいです。これはフードプロセッサーなどでも言える話ですし、大した問題にはならないでしょう。&lt;/li&gt;
  &lt;li&gt;確実に太りました。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id="section-20"&gt;嗜好品&lt;/h1&gt;

&lt;p&gt;もといコーヒーです。&lt;/p&gt;

&lt;h2 id="section-21"&gt;ビアレッティ モカエクスプレス&lt;/h2&gt;

&lt;p&gt;イタリア製の伝統的な直火式エスプレッソです。&lt;/p&gt;

&lt;table border="0" cellpadding="5"&gt;&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/B0000AN3QI/unplu-22/ref=nosim/" target="_blank"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/41KfROnos3L._SL160_.jpg" border="0" alt="BIALETTI モカエクスプレス3CUP BEX-3" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;font size="-1"&gt;&lt;a href="http://www.amazon.co.jp/BIALETTI-%E3%83%93%E3%82%A2%E3%83%AC%E3%83%83%E3%83%86%E3%82%A3-ES030200-%E3%83%A2%E3%82%AB%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%97%E3%83%AC%E3%82%B93CUP-BEX-3/dp/B0000AN3QI%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dunplu-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB0000AN3QI" target="_blank"&gt;BIALETTI モカエクスプレス3CUP BEX-3&lt;/a&gt;&lt;img src="http://www.assoc-amazon.jp/e/ir?t=unplu-22&amp;amp;l=ur2&amp;amp;o=9" width="1" height="1" style="border: none;" alt="" /&gt;&lt;br /&gt;&lt;br /&gt;BIALETTI (ビアレッティ)  &lt;br /&gt;売り上げランキング : 1866&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.amazon.co.jp/BIALETTI-%E3%83%93%E3%82%A2%E3%83%AC%E3%83%83%E3%83%86%E3%82%A3-ES030200-%E3%83%A2%E3%82%AB%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%97%E3%83%AC%E3%82%B93CUP-BEX-3/dp/B0000AN3QI%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dunplu-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB0000AN3QI" target="_blank"&gt;Amazonで詳しく見る&lt;/a&gt;&lt;/font&gt; &lt;font size="-2"&gt;by &lt;a href="http://www.goodpic.com/mt/aws/index.html"&gt;G-Tools&lt;/a&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id="section-22"&gt;購入経緯&lt;/h3&gt;

&lt;p&gt;バイト時代にマニュアル式の本格的なエスプレッソマシンを担当し、自分好みの美味しいラテを作る幸せに出会って以来、コーヒーはドリップよりもエスプレッソやカフェラテが好きです。
しかし引っ越しの際に、部屋にあった家庭用エスプレッソメーカーをリサイクル処分してしまったため、新しいものを探していました。
キッチンがそれほど広くない(3帖ちょっと)ため、場所を取らないものをと調べているうちに、この『モカエクスプレス』に出会いました。&lt;/p&gt;

&lt;p&gt;『モカエクスプレス』は電気式エスプレッソマシンが出る以前に家庭で良く使われていたコーヒーマシンで、本当かどうかは知りませんが
今でもイタリアの家庭では広く使われているそうです。
構造もいたってシンプルで分解でき、使うたびに愛着が湧いています。&lt;/p&gt;

&lt;p&gt;コンランショップで6人用を購入後、普段使い用に3人用をAmazonで購入しました。&lt;/p&gt;

&lt;h3 id="section-23"&gt;気にいっている点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;自分で入れるコーヒーが一番美味しく感じるようになった。&lt;/li&gt;
  &lt;li&gt;シンプル。&lt;/li&gt;
  &lt;li&gt;洗浄時に洗剤は使用しないため、エコ(笑)。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="section-24"&gt;イマイチな点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;大は小を兼ねないので、8人用で3人分だけ作るといったことは出来ない。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="section-25"&gt;備考&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;電気式に比べて蒸気圧がそれほど高くならないなど、正確にはマキネッタというジャンルになります。&lt;/li&gt;
  &lt;li&gt;一応&lt;a href="http://www.amazon.co.jp/gp/product/B000A40NAI/ref=as_li_ss_tl?ie=UTF8&amp;amp;amp;camp=247&amp;amp;amp;creative=7399&amp;amp;amp;creativeASIN=B000A40NAI&amp;amp;amp;linkCode=as2&amp;amp;amp;tag=unplu-22"&gt;ケメックス&lt;/a&gt;(ドリップ式)も持っているのですが、ほとんど使っていません。&lt;/li&gt;
  &lt;li&gt;おそらく今後自宅用エスプレッソマシンを買うことはないと思います。&lt;/li&gt;
  &lt;li&gt;豆は&lt;strong&gt;細挽き&lt;/strong&gt;になります。いわゆるエスプレッソ用は極細挽きが多いので注意が必要です。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="section-26"&gt;ビアレッティ ミルクフローサー&lt;/h2&gt;

&lt;p&gt;『モカエクスプレス』と合わせて使いたい、ミルクフローサーです。1台3役。&lt;/p&gt;

&lt;table border="0" cellpadding="5"&gt;&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00Q9LF798/unplu-22/ref=nosim/" target="_blank"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/41n0Sz3bP9L._SL160_.jpg" border="0" alt="BIALETTI(ビアレッティ) ミルクフローサー MK01" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;font size="-1"&gt;&lt;a href="http://www.amazon.co.jp/BIALETTI-%E3%83%93%E3%82%A2%E3%83%AC%E3%83%83%E3%83%86%E3%82%A3-MK01-%E3%83%9F%E3%83%AB%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%82%B5%E3%83%BC/dp/B00Q9LF798%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dunplu-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB00Q9LF798" target="_blank"&gt;BIALETTI(ビアレッティ) ミルクフローサー MK01&lt;/a&gt;&lt;img src="http://www.assoc-amazon.jp/e/ir?t=unplu-22&amp;amp;l=ur2&amp;amp;o=9" width="1" height="1" style="border: none;" alt="" /&gt;&lt;br /&gt;&lt;br /&gt;BIALETTI (ビアレッティ)  &lt;br /&gt;売り上げランキング : 152699&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.amazon.co.jp/BIALETTI-%E3%83%93%E3%82%A2%E3%83%AC%E3%83%83%E3%83%86%E3%82%A3-MK01-%E3%83%9F%E3%83%AB%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%82%B5%E3%83%BC/dp/B00Q9LF798%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dunplu-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB00Q9LF798" target="_blank"&gt;Amazonで詳しく見る&lt;/a&gt;&lt;/font&gt; &lt;font size="-2"&gt;by &lt;a href="http://www.goodpic.com/mt/aws/index.html"&gt;G-Tools&lt;/a&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id="section-27"&gt;購入経緯&lt;/h3&gt;

&lt;p&gt;エスプレッソが淹れられるようになったけど、電気式のものと違ってミルクフォーマー(泡だて器)などがありません。
ホットミルクとミルクフォームがあれば自宅でカフェラテやカプチーノを味わえます。
そこで、ちょうどタイミング良く発売されたばかりのこの製品を購入しました。&lt;/p&gt;

&lt;h3 id="section-28"&gt;気にいっている点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;これ1台で、ホットミルク、冷たいミルクフォーム、温かいミルクフォームが作れます。&lt;/li&gt;
  &lt;li&gt;イタリア製家電にあまり良い印象を持ってませんでしたが、ボタンが1つだけでとても使いやすいです。&lt;/li&gt;
  &lt;li&gt;1分ほどで完成します。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="section-29"&gt;イマイチな点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;分量的に、1度にせいぜい2人分しか作れません。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="section-30"&gt;まとめ&lt;/h2&gt;

&lt;p&gt;調理関係は、この他に保存容器やお皿、カトラリーなども色々書きたいのですが、多すぎるために割愛しました。
引っ越してから、毎日自炊(主に朝食と土日祝担当)をするようになり、コンビニへ行かなくなりました。&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p lang="ja" dir="ltr"&gt;腹が減ってはうんたらかんたら。今日は慣れない集まりもあったし、ようやく生き返る。コーディングも捗ります。 &lt;a href="http://t.co/9JhvYgdmYO"&gt;pic.twitter.com/9JhvYgdmYO&lt;/a&gt;&lt;/p&gt;&amp;mdash; 3100 (@zero310) &lt;a href="https://twitter.com/zero310/status/592251668802052096"&gt;2015, 4月 26&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p lang="ja" dir="ltr"&gt;kitchen storiesにあったレシピで作った伝統的なキャロットケーキとアイシングクリームチーズ。自家製レモンバームも添えて。 &lt;a href="http://t.co/X4WNr2PxQU"&gt;pic.twitter.com/X4WNr2PxQU&lt;/a&gt;&lt;/p&gt;&amp;mdash; 3100 (@zero310) &lt;a href="https://twitter.com/zero310/status/582178730090491904"&gt;2015, 3月 29&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p lang="ja" dir="ltr"&gt;ホットフォーム余ったの全部載せた。こっちのが泡が綺麗。 &lt;a href="http://t.co/rpPedbsRNr"&gt;pic.twitter.com/rpPedbsRNr&lt;/a&gt;&lt;/p&gt;&amp;mdash; 3100 (@zero310) &lt;a href="https://twitter.com/zero310/status/594722217176379392"&gt;2015, 5月 3&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h2 id="section-31"&gt;そういえば&lt;/h2&gt;

&lt;p&gt;180cmのダイニングテーブルを作った話もそのうちまとめたい(が、もはや記憶の彼方だ。。)&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p lang="ja" dir="ltr"&gt;ダイニングテーブル進捗報告。ドレッシングテーブルネイビーブルー。舌噛んだ。天板も蜜蝋ワックス塗りました。 &lt;a href="http://t.co/DUrxVL4MEk"&gt;pic.twitter.com/DUrxVL4MEk&lt;/a&gt;&lt;/p&gt;&amp;mdash; 3100 (@zero310) &lt;a href="https://twitter.com/zero310/status/520221639179399168"&gt;2014, 10月 9&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

</content>
  </entry>
  <entry>
    <title>Github Pagesでリアルタイムアクセス解析を行う</title>
    <link rel="alternate" href="http://3100.github.io/blog/2015/04/06/analytics-for-github-pages.html"/>
    <id>http://3100.github.io/blog/2015/04/06/analytics-for-github-pages.html</id>
    <published>2015-04-06T11:00:00Z</published>
    <updated>2015-05-07T16:26:53+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;先日、&lt;code&gt;hexo&lt;/code&gt;という&lt;code&gt;Node.js&lt;/code&gt;製静的サイト作成ツールを用いて&lt;a href="http://npminside.github.io/"&gt;Npm Inside&lt;/a&gt;というブログを新たに始めました。
ついでに、遅ればせながらきちんとアクセス解析もしようと思い立ちました。
このブログは&lt;code&gt;middleman&lt;/code&gt;で作っていますが、こちらも特に解析をしていませんでした。&lt;/p&gt;

&lt;p&gt;早速調べたところ、&lt;code&gt;ga-beacon&lt;/code&gt;というライブラリが良さそうだったので導入してみました。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/igrigorik/ga-beacon"&gt;igrigorik/ga-beacon&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="ga-beacon"&gt;ga-beaconとは&lt;/h2&gt;

&lt;p&gt;&lt;img src="https://camo.githubusercontent.com/56019dbde15bdf7303fa16e9860ba07787801b72/68747470733a2f2f6c68352e676f6f676c6575736572636f6e74656e742e636f6d2f2d5a753972396d37557630632f557353516c4a354f6f65492f414141414141414148776f2f6676485f6c7256555630772f77313030372d683436372d6e6f2f736b697463682e706e67" width="800px" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ga-beacon&lt;/code&gt;は&lt;code&gt;MIT&lt;/code&gt;ライセンスで公開されているツールで、&lt;code&gt;Google Analytics&lt;/code&gt;と連携してリアルタイムにアクセス解析を行ってくれるものです。
&lt;code&gt;Google Analytics&lt;/code&gt;の画面から現在どのページに何人アクセスしているのかを閲覧することができます。&lt;/p&gt;

&lt;p&gt;元々、&lt;code&gt;Github Pages&lt;/code&gt;用のアクセス解析は無いかと探していて、このツールにたどり着きました。&lt;/p&gt;

&lt;h2 id="section"&gt;導入方法&lt;/h2&gt;

&lt;p&gt;導入は簡単です。事前に&lt;code&gt;Google Analytics&lt;/code&gt;に登録をします。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;新しいプロパティを作成します。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Website&lt;/code&gt;を選択します。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Website name&lt;/code&gt;に識別用の名前を入力します。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;WebSite URL&lt;/code&gt;の項目に&lt;code&gt;https://ga-beacon.appspot.com/&lt;/code&gt;と入力します。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Get Tracking ID&lt;/code&gt;をクリックし、&lt;code&gt;UA-XXXXX-X&lt;/code&gt;というIDをコピーするかメモります。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;https://ga-beacon.appspot.com&lt;/code&gt;のように外部URLを指定したくないという方は、自前でGAE上にインスタンスを建てることも可能です。&lt;/p&gt;

&lt;p&gt;続いて、アクセス解析を行いたいページに以下のようなHTMLを追加します。ここに貼られた画像がいわゆるビーコンとしてアクセスを検知します。&lt;/p&gt;

&lt;pre class="highlight html"&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://your.site.com/page-name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://ga-beacon.appspot.com/UA-XXXXX-X/your.site.com/page-name"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;もし、ビーコン画像を表示したくない場合は、&lt;code&gt;img src&lt;/code&gt;で指定したURLの最後に&lt;code&gt;?pixel&lt;/code&gt;を付与しましょう。&lt;/p&gt;

&lt;p&gt;実際のケースでは、これを全てのページに登録するのはとても骨の折れる作業です。
静的サイト作成ツールを利用している場合にはなんとか自動化しましょう。&lt;/p&gt;

&lt;h3 id="middleman"&gt;middlemanのケース&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;middleman&lt;/code&gt;を&lt;code&gt;middleman-blog&lt;/code&gt;と共に利用している場合は、&lt;code&gt;source/_layouts/article.slim&lt;/code&gt;にて&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;= link_to current_article
  = image_tag "https://ga-beacon.appspot.com/UA-XXXXX-X/#{current_article.url}?pixel"
&lt;/pre&gt;

&lt;p&gt;を適当なところに埋め込むと良いでしょう。(&lt;code&gt;slim&lt;/code&gt;の例)
デフォルトのテンプレートエンジンなら、以下の様な感じでしょうか。(違っていたらごめんなさい)&lt;/p&gt;

&lt;pre class="highlight erb"&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="n"&gt;current_article&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;image_tag&lt;/span&gt; &lt;span class="s2"&gt;"https://ga-beacon.appspot.com/UA-XXXXX-X/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;current_article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?pixel"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;h3 id="hexo"&gt;hexoのケース&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;hexo&lt;/code&gt;を利用している場合は、&lt;code&gt;themes/your-theme/layout/_partial/article.ejs&lt;/code&gt;内の適当な箇所に&lt;/p&gt;

&lt;pre class="highlight html"&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%- post.permalink %&amp;gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://ga-beacon.appspot.com/UA-XXXXX-X/&amp;lt;%- post.path -%&amp;gt;?pixel"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;と追加すると良いかと思います。&lt;/p&gt;

&lt;h2 id="section-1"&gt;まとめ&lt;/h2&gt;

&lt;p&gt;以上のような感じで、リアルタイムにアクセス解析が実現します。
素晴らしいですね。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Arch LinuxからODBC経由でMS SQLServerにアクセスする</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/11/20/odbc-in-arch-linux.html"/>
    <id>http://3100.github.io/blog/2014/11/20/odbc-in-arch-linux.html</id>
    <published>2014-11-20T07:00:00Z</published>
    <updated>2015-05-07T16:26:53+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="section"&gt;概要&lt;/h1&gt;

&lt;p&gt;今の仕事では
データを格納しているDBが&lt;code&gt;Microsoft SQL Server&lt;/code&gt;(以下SQLServer)というのが主な理由で
&lt;code&gt;R&lt;/code&gt;スクリプトの実装をWindows上で行っています。
(&lt;code&gt;R&lt;/code&gt;とSQLServerの連携自体は&lt;code&gt;ODBC&lt;/code&gt;を利用しています。)&lt;/p&gt;

&lt;p&gt;しかし、&lt;code&gt;cygwin&lt;/code&gt;にだんだん嫌気が差してきたので
&lt;code&gt;arch&lt;/code&gt;でODBCの設定を行い、
各スクリプトをarch上で使えるようにしてみました。&lt;/p&gt;

&lt;p&gt;SQLServer 2012で検証していますが、それ以外でも大丈夫かと思います。&lt;/p&gt;

&lt;h1 id="odbc"&gt;ODBCの準備&lt;/h1&gt;

&lt;p&gt;まず&lt;code&gt;FreeTDS&lt;/code&gt;というライブラリを導入します。
これはSQLServerやSybaseなどと通信するためのライブラリ群です。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;# pacman -S freetds
&lt;/pre&gt;

&lt;h1 id="odbc-1"&gt;ODBCの設定&lt;/h1&gt;

&lt;p&gt;続いて、設定ファイルの編集してきます。&lt;/p&gt;

&lt;p&gt;/etc/odbcinst.ini&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;[FreeTDS]
Driver      = /usr/lib/libtdsodbc.so
UsageCount  = 1
&lt;/pre&gt;

&lt;p&gt;/etc/odbc.ini&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;[your_server_name]
Driver      = FreeTDS
Servername  = your_server_name
Database    = your_db_name
&lt;/pre&gt;

&lt;p&gt;/etc/freetds/freetds.conf&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;[your_server_name]
host            = xxx.xxx.xxx.xxx # Host name or IP
port            = xxxxx           # Default: 1433
tds version     = 7.1
client charset  = UTF-8
&lt;/pre&gt;

&lt;h1 id="section-1"&gt;接続テスト&lt;/h1&gt;

&lt;p&gt;Rのスクリプト例です。
&lt;code&gt;RODBC&lt;/code&gt;パッケージを使って接続するのが簡単でしょうか。&lt;/p&gt;

&lt;p&gt;もちろん、他の言語からも利用可能なはずです。&lt;/p&gt;

&lt;pre class="highlight r"&gt;&lt;span class="c1"&gt;# your_server_name: ODBCの設定名(上と同じ名前)
# user: ユーザ名
# password: パスワード
# library(RODBC)
&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s1"&gt;'SELECT column1, column2 FROM your_db.dbo.table1'&lt;/span&gt;
&lt;span class="n"&gt;con&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;odbcConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;your_server_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;as.data.frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqlQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;odbcClose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;エラーが出る場合などは&lt;/p&gt;

&lt;pre class="highlight r"&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recover&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;などで追い詰めると良いかもです。&lt;/p&gt;

&lt;h1 id="section-2"&gt;参考&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://wiki.archlinux.org/index.php/odbc"&gt;Odbc - ArchWiki&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>SwiftをVimから叩きたい</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/11/03/swift-with-vim.html"/>
    <id>http://3100.github.io/blog/2014/11/03/swift-with-vim.html</id>
    <published>2014-11-03T03:00:00Z</published>
    <updated>2015-05-07T16:26:53+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2 id="section"&gt;概要&lt;/h2&gt;

&lt;p&gt;最近仕事は&lt;code&gt;R&lt;/code&gt;だし興味あるのは1.4β版で盛り上がってる&lt;code&gt;Go&lt;/code&gt;だし、
覚える言語多すぎると挫折しそうなので、
今までこじらせて&lt;code&gt;RubyMotion&lt;/code&gt;に逃げたりしたけど、
下の記事を読んで色々考えて、逆に&lt;code&gt;Swift&lt;/code&gt;をやろうと思った。&lt;/p&gt;

&lt;p&gt;cf. &lt;a href="http://blog.thefrontiergroup.com.au/2014/09/should-my-company-choose-rubymotion-or-swift/"&gt;Should my company choose RubyMotion or Swift? - The Frontier Group Journal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まずは&lt;code&gt;Vim&lt;/code&gt;から実行できるようにしました。
&lt;code&gt;vim-quickrun&lt;/code&gt;を&lt;code&gt;Neobundle&lt;/code&gt;あたりで導入済みというのが前提です。&lt;/p&gt;

&lt;h2 id="section-1"&gt;準備&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Xcode6&lt;/code&gt;はいずれにしても必要と思われるので、
事前に&lt;a href="https://itunes.apple.com/us/app/xcode/id497799835?ls=1&amp;amp;amp;mt=12"&gt;AppStore&lt;/a&gt;からインストールしておきます。&lt;/p&gt;

&lt;p&gt;手元環境ではなぜかインストールしたのに&lt;code&gt;Xcode5&lt;/code&gt;になってるという悲しい事態もありましたが
削除後再インストールで無事6が入りました。&lt;/p&gt;

&lt;h2 id="swift"&gt;Swiftをコマンドラインから叩けるようにする&lt;/h2&gt;

&lt;p&gt;Webを見るとまだベータ版の頃の方法が多く見つかりますが、
現時点では以下のようにするとよいでしょう。&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;# xcode-select -switch /Applications/Xcode.app/Contents/Developer
&lt;/pre&gt;

&lt;p&gt;とした後、&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ xrun swift
&lt;/pre&gt;

&lt;p&gt;でREPL環境に入れるようになります。引数にswiftファイルを渡せば、結果を返します。&lt;/p&gt;

&lt;p&gt;cf. &lt;a href="http://stackoverflow.com/questions/24011120/how-can-i-use-swift-in-terminal"&gt;xcode - How can I use swift in Terminal? - Stack Overflow&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="vim"&gt;Vimの設定&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Swift用シンタックスハイライトとインデント&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/thinca/vim-quickrun"&gt;vim-quickrun&lt;/a&gt;で動かせるようにする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$HOME/.vimrc&lt;/code&gt;に以下を追加します。&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;span class="k"&gt;if &lt;/span&gt;has&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mac"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   NeoBundle &lt;span class="s1"&gt;'toyamarinyon/vim-swift'&lt;/span&gt;

   &lt;span class="nb"&gt;let &lt;/span&gt;g:quickrun_config[&lt;span class="s1"&gt;'swift'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="se"&gt;\ &lt;/span&gt;&lt;span class="s1"&gt;'command'&lt;/span&gt;: &lt;span class="s1"&gt;'xcrun'&lt;/span&gt;,
   &lt;span class="se"&gt;\ &lt;/span&gt;&lt;span class="s1"&gt;'cmdopt'&lt;/span&gt;: &lt;span class="s1"&gt;'swift'&lt;/span&gt;,
   &lt;span class="se"&gt;\ &lt;/span&gt;&lt;span class="s1"&gt;'exec'&lt;/span&gt;: &lt;span class="s1"&gt;'%c %o %s'&lt;/span&gt;,
   &lt;span class="se"&gt;\}&lt;/span&gt;
 endif
&lt;/pre&gt;

&lt;h2 id="section-2"&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://oooooooo.hatenablog.com/entry/2014/10/04/23532"&gt;Swift をコマンドラインから使う - oooooooo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;後から見つけたのだけど、&lt;code&gt;Quick&lt;/code&gt;など周辺ツールについても書かれていてオススメです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>martiniとgin</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/07/03/martini-and-gin.html"/>
    <id>http://3100.github.io/blog/2014/07/03/martini-and-gin.html</id>
    <published>2014-07-03T13:00:00Z</published>
    <updated>2015-05-07T16:26:53+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2 id="section"&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/go-martini/martini"&gt;martini&lt;/a&gt;という&lt;code&gt;Go&lt;/code&gt;向けのWebアプリケーションフレームワーク(WAF)があります。
最近リリースされて、すぐに&lt;code&gt;Go&lt;/code&gt;コミュニティ界隈で話題になりましたね。&lt;/p&gt;

&lt;p&gt;また、&lt;a href="https://github.com/gin-gonic/gin"&gt;gin&lt;/a&gt;という別のWAFも出て、
こちらは&lt;code&gt;martini&lt;/code&gt;より40倍以上も速いぜと主張しています。&lt;/p&gt;

&lt;p&gt;どちらか迷った挙句、速さは正義ということで、&lt;code&gt;gin&lt;/code&gt;を触ってみたのですが
結局&lt;code&gt;martini&lt;/code&gt;を使うことにしました。&lt;/p&gt;

&lt;h2 id="martini"&gt;martiniについて&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;martini&lt;/code&gt;は機能拡張を容易にするため、DIを利用しています。
この実装として、リフレクションを利用しています。&lt;/p&gt;

&lt;p&gt;一方、&lt;code&gt;Go&lt;/code&gt;の&lt;code&gt;net/http&lt;/code&gt;パッケージはそうした実装にはなっていません。
リフレクションを利用することはパフォーマンス的にも2桁近く遅くなることがある他、
ランタイムエラーの原因にもなるなどから、一部で批判を受けました。
(そもそもDIは&lt;code&gt;Java&lt;/code&gt;での古き悪しきイメージが強いのかもしれません。)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stephensearles.com/?p=254"&gt;Three reasons you should not use Martini - Stephen Searles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;開発者の&lt;a href="https://twitter.com/codegangsta"&gt;@codegangsta&lt;/a&gt;ことJeremy Saenzはこうした批判に対して記事を書いていて、
&lt;code&gt;martini&lt;/code&gt;のDI実装が完璧ではないことを率直に認め、
&lt;a href="https://github.com/codegangsta/negroni"&gt;negroni&lt;/a&gt;という別のアプローチも試みるよと書いています。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://codegangsta.io/blog/2014/05/19/my-thoughts-on-martini/"&gt;My Thoughts on Martini - Code Gangsta&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;既に&lt;code&gt;martini&lt;/code&gt;を使っている人向けには、ぜひ今後とも使い続けて欲しい、とコメントしています。&lt;/p&gt;

&lt;h2 id="gin"&gt;ginについて&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;martini&lt;/code&gt;が批判を受け、かつそれより高速で同じように記述できる&lt;code&gt;gin&lt;/code&gt;が出てきた今
&lt;code&gt;martini&lt;/code&gt;は無用の長物なのでしょうか。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://news.ycombinator.com/item?id=7966700"&gt;Show HN: Gin – Golang Martini-like web framework - Hacker News&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gin&lt;/code&gt;が登場すると、すぐにHacker News上などで反応がありましたが、
実装はかなり薄くなっているため、その部分をどう捉えるかという選択の問題になりそうだなという感想を抱きました。
(ささっと簡単なWebAPIを用意するくらいだったら、高速な&lt;code&gt;gin&lt;/code&gt;のが良いかもしれません。)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Go&lt;/code&gt;黎明期から積極的にブログなどで情報公開している@mattnさんも、以下のようにツイートしています。&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p&gt;gin が martini の40倍速いって話、コードを軽く読んだ感じだと gin は martini の rack like middleware 層を排除している反面、機能を最少しか持ってない。足りない感じもしなくないので同じ土俵で40倍速いってのはフェアじゃない気もする。&lt;/p&gt;&amp;mdash; mattn (@mattn_jp) &lt;a href="https://twitter.com/mattn_jp/statuses/483778677197373441"&gt;2014, 7月 1&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;また、個人的に使ってみた感想としては、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;まだ連携ライブラリが少ない(逆に言えば貢献のチャンス？)&lt;/li&gt;
  &lt;li&gt;まだまだ実装が変わりそう&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;な印象を受けました。&lt;/p&gt;

&lt;p&gt;例えば、&lt;code&gt;redis&lt;/code&gt;と連携しようとして、&lt;a href="https://github.com/garyburd/redigo"&gt;redigo&lt;/a&gt;なんかを使おうとした場合、
&lt;code&gt;martini&lt;/code&gt;ではMap機能があるので簡単に取り込んで利用できますが
&lt;code&gt;gin&lt;/code&gt;ではそういった機能は用意されていません。(あくまで現時点では。)&lt;/p&gt;

&lt;p&gt;もっとも、連携機能については、PRもあがっていて、それほど時間はかからずに、改善されるのではないかと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/gin-gonic/gin/pull/16"&gt;Wrap http.ResponseWriter to greatly increase middleware/logging accesibilty by zmarcantel · Pull Request #16 · gin-gonic/gin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;あまり重要なポイントではないかもしれませんが、
ルーティング用メソッドが&lt;code&gt;Get&lt;/code&gt;や&lt;code&gt;Post&lt;/code&gt;じゃなくて、&lt;code&gt;GET&lt;/code&gt;や&lt;code&gt;POST&lt;/code&gt;だというのも、気持ち悪いかもしれません。。&lt;/p&gt;

&lt;h2 id="section-1"&gt;まとめ&lt;/h2&gt;

&lt;p&gt;将来的に&lt;code&gt;gin&lt;/code&gt;がどうなっていくのかは楽しみですが、現時点では&lt;code&gt;martini&lt;/code&gt;を使うのが、開発時には楽である気がします。&lt;/p&gt;

&lt;p&gt;さらに、身も蓋もないことを書きますと、自分自身がそこまで高速であることが求められるようなプロジェクトに携われていません。&lt;/p&gt;

&lt;p&gt;とはいえ、たとえば&lt;code&gt;redis&lt;/code&gt;が数万クエリ/秒を捌けるのに比べて&lt;code&gt;gin&lt;/code&gt;は約1500リクエスト/秒、&lt;code&gt;martini&lt;/code&gt;は約300リクエスト/秒(&lt;code&gt;rails&lt;/code&gt;とか&lt;code&gt;node.js&lt;/code&gt;級？)ですから、
WAFが高速化すると嬉しい部分はまだまだありそうです。&lt;/p&gt;

&lt;p&gt;今後&lt;code&gt;gin&lt;/code&gt;が高機能になった時点で、再度検討したいなと思います。&lt;/p&gt;

&lt;h2 id="section-2"&gt;おまけ&lt;/h2&gt;

&lt;p&gt;日本でも最近は&lt;code&gt;rebuild.fm&lt;/code&gt;に代表されるような開発者向けpodcastが増えてきましたが、
割りと古くからある&lt;code&gt;The Changelog&lt;/code&gt;でも少し前に&lt;code&gt;martini&lt;/code&gt;を取り上げ、
@codegangstaがゲストとして、なぜこういった実装になったか、その思想を語っています。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://thechangelog.com/117/"&gt;#117: Go, Martini and Gophercasts with Jeremy Saenz - The Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;あとは、どうしてそんなHNになったのかとか、どうでもいい話題もあって楽しめます。&lt;/p&gt;

&lt;p&gt;そんなに話す速度も速くないし、割りと日本の英語教育でも学ぶような言い回しが多いので、
&lt;code&gt;martini&lt;/code&gt;が気になっている方は聴いてみると良いかもしれません。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>linq.jsを触ってみた</title>
    <link rel="alternate" href="http://3100.github.io/blog/2014/06/30/introduction-of-linq-js.html"/>
    <id>http://3100.github.io/blog/2014/06/30/introduction-of-linq-js.html</id>
    <published>2014-06-30T12:36:00Z</published>
    <updated>2015-05-07T16:26:53+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2 id="section"&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://linqjs.codeplex.com/"&gt;linq.js&lt;/a&gt;という、データを汎用的に処理するクエリ機能を試してみました。&lt;/p&gt;

&lt;h2 id="section-1"&gt;前置き&lt;/h2&gt;

&lt;p&gt;先日から&lt;code&gt;vue.js&lt;/code&gt;という&lt;code&gt;MVVM&lt;/code&gt;ライクな実装を可能にするライブラリを触っています。
&lt;code&gt;MVVM&lt;/code&gt;といえば&lt;code&gt;Silverlight&lt;/code&gt;や&lt;code&gt;WPF&lt;/code&gt;。
元々Microsoftが流行らせようとしたパターンです。&lt;/p&gt;

&lt;p&gt;そのMicrosoftが開発したもう1つの便利ツールがあります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LINQ&lt;/code&gt;です。
あまりご存知でない方のために簡単に説明しますと、データの形態を気にせずに、汎用的に使えることを目指した強力なクエリ機能です。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://msdn.microsoft.com/ja-jp/library/bb397926.aspx"&gt;統合言語クエリ (LINQ: Language-Integrated Query)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この&lt;code&gt;LINQ&lt;/code&gt;、&lt;code&gt;C#&lt;/code&gt;や&lt;code&gt;VisualBasic&lt;/code&gt;向けなんですが、
有志が雰囲気そのままに&lt;code&gt;JavaScript&lt;/code&gt;へ移植していることは以前から知っていました。&lt;/p&gt;

&lt;p&gt;今回&lt;code&gt;MVVM&lt;/code&gt;もやるんだし、ちょうど良い機会だろうということで実際に触ってみることにしました。&lt;/p&gt;

&lt;h2 id="section-2"&gt;導入方法&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;//cdnjs.cloudflare.com/ajax/libs/linq.js/2.2.0.2/jquery.linq.min.js&lt;/li&gt;
  &lt;li&gt;//cdnjs.cloudflare.com/ajax/libs/linq.js/2.2.0.2/linq.min.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記2ライブラリを組み込むのがとりあえず触るには簡単かと思います。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id="section-3"&gt;使い方&lt;/h2&gt;

&lt;h3 id="json"&gt;JSON&lt;/h3&gt;

&lt;pre class="highlight coffeescript"&gt;&lt;span class="nx"&gt;demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;isSameMonth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;checkedMenu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Enumerable.From()&lt;/code&gt;で&lt;code&gt;json&lt;/code&gt;形式のオブジェクトを取り込むことが出来ます。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Where()&lt;/code&gt;は条件節。該当するデータのみ次へ送ります。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Select()&lt;/code&gt;は出力対象を指定します。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ToArray()&lt;/code&gt;で実際に処理が実行されます。&lt;code&gt;LINQ&lt;/code&gt;は遅延処理&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="dom"&gt;DOM&lt;/h3&gt;

&lt;pre class="highlight coffeescript"&gt;&lt;span class="nx"&gt;checked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"input[id^=check]"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toEnumerable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"$.attr('checked') == 'checked'"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;toEnumerable()&lt;/code&gt;で&lt;code&gt;jQuery&lt;/code&gt;のセレクタを取り込めます。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Where()&lt;/code&gt;の中のような表現で書くことも出来ます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="section-4"&gt;注意点: クエリは遅延実行&lt;/h3&gt;

&lt;p&gt;上にもさらっと書きましたが、&lt;code&gt;LINQ&lt;/code&gt;は実行されるまではただのクエリです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ToArray()&lt;/code&gt;などで呼び出すことで、実際に処理が行われます。&lt;/p&gt;

&lt;pre class="highlight coffeescript"&gt;&lt;span class="c1"&gt;# ただのクエリ。処理はまだ行われない
&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;price&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# ここで初めて処理が実行される
&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# やはり、まだ処理は行われない
&lt;/span&gt;&lt;span class="nx"&gt;query2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;OrderBy&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;query2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;price&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
         &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# ここで処理が行われる
&lt;/span&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id="section-5"&gt;クエリの種類&lt;/h2&gt;

&lt;p&gt;その数なんと90種類！
&lt;code&gt;LINQ&lt;/code&gt;にあるものは大抵用意されているようです。独自のものもあります。&lt;/p&gt;

&lt;p&gt;少しだけ紹介します。&lt;/p&gt;

&lt;h3 id="groupby"&gt;GroupBy&lt;/h3&gt;

&lt;pre class="highlight coffeescript"&gt;&lt;span class="nx"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GroupBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"$.menu"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"{ y: $$.Count(), name: $}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;GroupBy()&lt;/code&gt;は集計用によく用いられる関数です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第1引数はキー&lt;/li&gt;
  &lt;li&gt;第2引数は中間データを加工する際に使用？&lt;/li&gt;
  &lt;li&gt;第3引数で出力データを指定。&lt;code&gt;$$&lt;/code&gt;は集計関数用&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="join"&gt;Join&lt;/h3&gt;

&lt;pre class="highlight coffeescript"&gt;&lt;span class="nx"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"$.id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"$.id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"{idA: $.id, valA: $.val, valB: $$.val}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;2つのデータを紐付けする関数です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第1引数に別データ&lt;/li&gt;
  &lt;li&gt;第2引数と第3引数にキー&lt;/li&gt;
  &lt;li&gt;第4引数に出力形式。&lt;code&gt;$$&lt;/code&gt;は2番めのデータ。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="orderby"&gt;OrderBy&lt;/h3&gt;

&lt;pre class="highlight coffeescript"&gt;&lt;span class="nx"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;OrderByDescending&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"$.y"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;これはわかりますよね。順序付けを行う関数です。&lt;code&gt;OrderByDescending()&lt;/code&gt;は降順。&lt;/p&gt;

&lt;h3 id="take"&gt;Take&lt;/h3&gt;

&lt;pre class="highlight coffeescript"&gt;&lt;span class="nx"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;先頭から指定件数だけ取得する関数です。&lt;/p&gt;

&lt;h3 id="section-6"&gt;その他&lt;/h3&gt;

&lt;p&gt;公式サイトにもサンプルがあるので、そちらもどうぞ。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://linqjs.codeplex.com/wikipage?title=linq.js%20Samples"&gt;http://linqjs.codeplex.com/wikipage?title=linq.js%20Samples&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="section-7"&gt;感想&lt;/h2&gt;

&lt;p&gt;さらっと上辺をなぞっただけですが、いかがでしたでしょうか。
&lt;code&gt;JavaScript&lt;/code&gt;上でのデータ操作や集計が、とても簡単になりそうな印象を受けました。
&lt;code&gt;LINQ&lt;/code&gt;自体に慣れ親しんでいる方からすると、
割りと直感的に使えるのではないかと思います。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;linq.js&lt;/code&gt;、なかなかオススメです。&lt;/p&gt;
</content>
  </entry>
</feed>
